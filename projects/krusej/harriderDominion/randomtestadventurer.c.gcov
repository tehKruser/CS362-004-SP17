        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/****************************
        -:    2:* Author: Derek Harris
        -:    3:* Course: CS362
        -:    4:* Assignment: Assignment 4
        -:    5:* File: randomtestadventurer.c
        -:    6:*****************************/
        -:    7: 
        -:    8:/*
        -:    9: * Include the following lines in your makefile:
        -:   10: *
        -:   11: * randomtestadventurer: randomtestadventurer.c dominion.o rngs.o
        -:   12: *      gcc -o randomtestadventurer -g  randomtestadventurer.c dominion.o rngs.o $(CFLAGS)
        -:   13: */
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include "rngs.h"
        -:   18:#include "interface.h"
        -:   19:#include <stdio.h>
        -:   20:#include <stdlib.h>
        -:   21:#include <assert.h>
        -:   22:#include <string.h>
        -:   23:
        -:   24:#define TESTCARD "adventurer"
        -:   25:#define NUM_TESTS 1000
        -:   26:
        -:   27://Function prototypes
        -:   28:void myAssert(int, int, int*);
        -:   29:void myAssertLessThan(int, int, int*);
        -:   30:
        -:   31:/****************
        -:   32:* Main function
        -:   33:****************/
function main called 1 returned 100% blocks executed 100%
        1:   34:int main() 
        -:   35:{
        1:   36:  int x = 0;						//variable to store for loop counter
        1:   37:  int j = 0;						//variable to store # treasure cards in test gamestate hand
        1:   38:  int m = 0;						//variable to store # treasure cards in actual gamestate hand
        1:   39:  int passCount = 0;					//variable to store # of tests passed this iteration
        1:   40:  int numPass = 0;					//variable to store total # of tests passed
        1:   41:  int numFail = 0;					//variable to store total # of tests failed
        1:   42:  int totTests = 0;					//variable to store total # of tests run
        1:   43:  int numTests = 4;					//variable to store # of tests
        1:   44:  int newCards = 0;					//variable to store # of new cards
        1:   45:  int discarded = 0;					//variable to store # of discarded cards
        1:   46:  int shuffledCards = 0;				//variable to store # of cards shuffled into deck
        1:   47:  int handpos = 0;					//variable to store hand position
        1:   48:  int choice1=0, choice2=0, choice3=0, bonus=0;		//variables to initialize choice and bonus
        1:   49:  int seed = 1000;					//seed for initialize game function
        1:   50:  int status = -1;					//variable to store result of initializing game
        1:   51:  int numPlayers = 0;					//variable to store # of players
        1:   52:  int thisPlayer = 0;					//variable to identify current player
        1:   53:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   54:			sea_hag, tribute, smithy, council_room};
        -:   55:
        -:   56:  struct gameState testG;				//struct to store test gamestate values
        -:   57:  struct gameState* randG;				//gameState struct ptr to help create new gameStates
        -:   58:
        -:   59:
     1001:   60:  for(x = 0; x < NUM_TESTS; x++)			//iterate for test case number of games
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   61:  {
     1000:   62:	  seed = rand();				//random seed to initialize gamestate
call    0 returned 100%
     1000:   63:	  numPlayers = (rand() % MAX_PLAYERS);		//randomize number of players... chooses between 2-4 players
call    0 returned 100%
     1000:   64:	  randG = malloc(sizeof(struct gameState));	//create new gameState struct
        -:   65:  
        -:   66:
        -:   67:	  // initialize a game state and player cards
     1000:   68:	  status = initializeGame(numPlayers, k, seed, randG);
call    0 returned 100%
        -:   69:
        -:   70:	  // initialize player hand, deck and discard pile to random numbers
     2473:   71:	  for(int a = 0; a < numPlayers; a++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:   72:	  {
     1473:   73:		  randG->deckCount[a] = rand() % MAX_DECK;
call    0 returned 100%
     1473:   74:		  randG->discardCount[a] = rand() % MAX_DECK;
call    0 returned 100%
     1473:   75:		  randG->handCount[a] = rand() % MAX_HAND;
call    0 returned 100%
        -:   76:	  }
        -:   77:
     1000:   78:	  printf("|***********************************************************************|\n");
call    0 returned 100%
     1000:   79:	  printf("|***********************************************************************|\n\n");
call    0 returned 100%
        -:   80:
     1000:   81:	  printf("----------------- Test # %d for Card: %s ----------------\n", x+1, TESTCARD);
call    0 returned 100%
        -:   82:
        -:   83:	  // ----------- TEST 1: +3 treasure cards --------------
     1000:   84:	  printf("TEST 1: +3 treasure cards and smaller deck\n");
call    0 returned 100%
     1000:   85:	  printf("\n");
call    0 returned 100%
        -:   86:
        -:   87:
        -:   88:	  //test game initiliazation status...failed test should return -1, otherwise should return 0
     1000:   89:	  if(status < 0)
branch  0 taken 52% (fallthrough)
branch  1 taken 49%
        -:   90:	  {
      515:   91:		printf("ERROR: Players < 2. Actual number of players: %d\n", numPlayers);
call    0 returned 100%
        -:   92:
      515:   93:		printf("status of gameState initialization = %d, expected = %d : ", status, -1);
call    0 returned 100%
      515:   94:		myAssert(status, -1, &passCount);	//assert test conditions here
call    0 returned 100%
        -:   95:
      515:   96:		printf("\n >>>>> SUCCESS: Test # %d for card [%s] complete.\nPassed [%d of %d] tests <<<<<\n\n", x+1, TESTCARD, passCount, 1);
call    0 returned 100%
      515:   97:		printf("Continuing to next test iteration \n\n");
call    0 returned 100%
        -:   98:
      515:   99:		numPass = numPass + passCount;		//record number of tests passed
      515:  100:		numFail = numFail + (1 - passCount);	//record number of tests failed
      515:  101:		totTests = totTests + 1;		//record total number of tests
        -:  102:
      515:  103:		passCount = 0;
      515:  104:		numTests = 4;
      515:  105:		free(randG);				//free dynamically allocated memory
      515:  106:		continue;
        -:  107:	  }
        -:  108:	  else
        -:  109:	  {
      485:  110:	  	printf("status of gameState initialization = %d, expected = %d : ", status, 0);
call    0 returned 100%
      485:  111:	  	myAssert(status, 0, &passCount);
call    0 returned 100%
        -:  112:	  }
        -:  113:
        -:  114:	  // copy the game state to a test case
      485:  115:	  memcpy(&testG, randG, sizeof(struct gameState));
        -:  116:
      485:  117:	  printf("\ntestG.handCount[thisPlayer] = %d, randG->handCount[thisPlayer] = %d\n\n", testG.handCount[thisPlayer], randG->handCount[thisPlayer]);
call    0 returned 100%
        -:  118:
      485:  119:	  cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);			//call the card's function
call    0 returned 100%
        -:  120:
      485:  121:	  newCards = 3;											//declare # of new cards
      485:  122:	  discarded = 1;										//declare # of cards to discard
        -:  123:
   118783:  124:	  for(int i = 0; i < testG.handCount[thisPlayer]; i++)  					//iterate through player's hand
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  125:	  {
   118298:  126:	    if((testG.hand[thisPlayer][i] > province) && (testG.hand[thisPlayer][i] < adventurer))	//if current card is a treasure card
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  127:	    {
     3152:  128:		j++;	//increment treasure card counter for test gamestate
        -:  129:	    }
        -:  130:	  }
        -:  131:
   117333:  132:	  for(int i = 0; i < randG->handCount[thisPlayer]; i++) 					//iterate through player's hand
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  133:	  {
   116848:  134:	    if((randG->hand[thisPlayer][i] > province) && (randG->hand[thisPlayer][i] < adventurer))	//if current card is a treasure card
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  135:	    {
     1702:  136:		m++;	//increment treasure card counter for actual gamestate
        -:  137:	    }
        -:  138:	  }
        -:  139:
      485:  140:	  printf("treasure count = %d, expected = %d : ", j, m+3);				//test state should have 3 more treasure cards
call    0 returned 100%
      485:  141:	  myAssert(j - m, 3, &passCount);							//test that testG hand has 3 add't treas. cards
call    0 returned 100%
        -:  142:
      485:  143:	  printf("hand count = %d, expected = %d : ", testG.handCount[thisPlayer], randG->handCount[thisPlayer] + newCards - discarded); 
call    0 returned 100%
      485:  144:	  myAssert(testG.handCount[thisPlayer], randG->handCount[thisPlayer] + newCards - discarded, &passCount);
call    0 returned 100%
        -:  145:
      485:  146:	  printf("deck count = %d <= expected = %d : ", testG.deckCount[thisPlayer], randG->deckCount[thisPlayer] - newCards + shuffledCards);
call    0 returned 100%
      485:  147:	  myAssertLessThan(testG.deckCount[thisPlayer], randG->deckCount[thisPlayer] - newCards + shuffledCards, &passCount);
call    0 returned 100%
        -:  148:
      485:  149:	  printf("---------------------------------------------------\n");
call    0 returned 100%
        -:  150:
        -:  151:	  //------------- Check other player states ------------------
      485:  152:	  printf("\nChecking other player states...\n\n");
call    0 returned 100%
        -:  153:
     1216:  154:	  for(int i = 1; i < numPlayers; i++)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:  155:	  {
      731:  156:	    printf("player[%d] hand count = %d, expected = %d : ", i+1, testG.handCount[i], randG->handCount[i]);
call    0 returned 100%
      731:  157:	    myAssert(testG.handCount[i], randG->handCount[i], &passCount);
call    0 returned 100%
        -:  158:
      731:  159:	    printf("player[%d] deck count = %d, expected = %d : ", i+1, testG.deckCount[i], randG->deckCount[i]);
call    0 returned 100%
      731:  160:	    myAssert(testG.deckCount[i], randG->deckCount[i], &passCount);
call    0 returned 100%
        -:  161:	  
      731:  162:	    numTests = numTests + 2;
        -:  163:	  }
        -:  164:
        -:  165:	  //------------- Check kingdom and victory card ------------------
      485:  166:	  printf("\nTesting Kingdom Card and Victory Card states...\n\n");
call    0 returned 100%
        -:  167:
     5335:  168:	  for(int j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  169:	  {
     4850:  170:	    printf("kingdom card k[%d] supply count = %d, expected = %d : ", j, testG.supplyCount[k[j]], randG->supplyCount[k[j]]);
call    0 returned 100%
     4850:  171:	    myAssert(testG.supplyCount[k[j]], randG->supplyCount[k[j]], &passCount);
call    0 returned 100%
        -:  172:
     4850:  173:	    numTests = numTests + 1;
        -:  174:	  }
        -:  175:
      485:  176:	  printf("\n");
call    0 returned 100%
        -:  177:
      485:  178:	  printf("victory card [estate] supply count = %d, expected = %d : ", testG.supplyCount[estate], randG->supplyCount[estate]);
call    0 returned 100%
      485:  179:	  myAssert(testG.supplyCount[estate], randG->supplyCount[estate], &passCount);
call    0 returned 100%
        -:  180:
      485:  181:	  numTests = numTests + 1;
        -:  182:
      485:  183:	  printf("victory card [duchy] supply count = %d, expected = %d : ", testG.supplyCount[duchy], randG->supplyCount[duchy]);
call    0 returned 100%
      485:  184:	  myAssert(testG.supplyCount[duchy], randG->supplyCount[duchy], &passCount);
call    0 returned 100%
        -:  185:
      485:  186:	  numTests = numTests + 1;
        -:  187:
      485:  188:	  printf("victory card [province] supply count = %d, expected = %d : ", testG.supplyCount[province], randG->supplyCount[province]);
call    0 returned 100%
      485:  189:	  myAssert(testG.supplyCount[province], randG->supplyCount[province], &passCount);
call    0 returned 100%
        -:  190:
      485:  191:	  numTests = numTests + 1;
        -:  192:
      485:  193:	  printf("---------------------------------------------------\n");
call    0 returned 100%
        -:  194:
        -:  195:	  //----------------------- print results -------------------------------
      485:  196:	  printf("\n >>>>> SUCCESS: Test # %d for card [%s] complete.\nPassed [%d of %d] tests <<<<<\n\n", x+1, TESTCARD, passCount, numTests);
call    0 returned 100%
        -:  197:
      485:  198:	  numPass = numPass + passCount;		//record number of tests passed for this game
      485:  199:	  numFail = numFail + (numTests - passCount);	//record number of tests failed for this game
      485:  200:	  totTests = totTests + numTests;		//record number of tests run
        -:  201:	
      485:  202:	  passCount = 0;				//reset passCount
      485:  203:	  numTests = 4;					//reset numTests
        -:  204:
      485:  205:	  free(randG);					//free dynamically allocated memory
      485:  206:	  memset(&testG, 0, sizeof(struct gameState));	//clear testG struct
        -:  207:
        -:  208:  }//end outer for loop
        -:  209:
        -:  210:
        1:  211:  printf("\n---------------------------------------------\n");
call    0 returned 100%
        1:  212:  printf("Final results of random testing:\n");
call    0 returned 100%
        1:  213:  printf("--------------------------------\n");
call    0 returned 100%
        1:  214:  printf("Total # of games run: %d\nTotal # of tests run: %d\nTotal # of tests passed: %d\nTotal # of tests failed: %d\n", NUM_TESTS,totTests, numPass, numFail);
call    0 returned 100%
        -:  215:
        1:  216:  return 0;
        -:  217:}
        -:  218:
        -:  219:/*************************************************************************************/
        -:  220:/*************************************************************************************/
        -:  221:
        -:  222:
        -:  223:/**********************************
        -:  224:* Function: myAssert()
        -:  225:* Input: int left, int right
        -:  226:* Output: none
        -:  227:* Description: compares left value
        -:  228:*   to right and displays a message
        -:  229:**********************************/
function myAssert called 9737 returned 100% blocks executed 100%
     9737:  230:void myAssert(int left, int right, int* count)
        -:  231:{
     9737:  232:  if(left == right)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        -:  233:  {
     8769:  234:    printf("test passed!\n");
call    0 returned 100%
     8769:  235:    *count+=1;
        -:  236:  }
        -:  237:  else
        -:  238:  {
      968:  239:    printf("test failed!\n");
call    0 returned 100%
        -:  240:  }
     9737:  241:}
        -:  242:
        -:  243:/**********************************
        -:  244:* Function: myAssertLessThan()
        -:  245:* Input: int left, int right
        -:  246:* Output: none
        -:  247:* Description: compares left value
        -:  248:*   to right and displays a message
        -:  249:**********************************/
function myAssertLessThan called 485 returned 100% blocks executed 100%
      485:  250:void myAssertLessThan(int left, int right, int* count)
        -:  251:{
      485:  252:  if(left <= right)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  253:  {
      483:  254:    printf("test passed!\n");
call    0 returned 100%
      483:  255:    *count+=1;
        -:  256:  }
        -:  257:  else
        -:  258:  {
        2:  259:    printf("test failed!\n");
call    0 returned 100%
        -:  260:  }
      485:  261:}

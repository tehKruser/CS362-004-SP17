        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 750 returned 100% blocks executed 83%
      750:    8:int compare(const void* a, const void* b) {
      750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      200:   12:    return -1;
      550:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 25 returned 100% blocks executed 88%
       25:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       25:   44:  SelectStream(1);
call    0 returned 100%
       25:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       25:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       25:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      275:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2750:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       25:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       25:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       25:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       25:   89:      state->supplyCount[estate] = 8;
       25:   90:      state->supplyCount[duchy] = 8;
       25:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       25:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       25:  102:  state->supplyCount[silver] = 40;
       25:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      525:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     4125:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3875:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      250:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      100:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       50:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      200:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      250:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3625:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       75:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       50:  140:      state->deckCount[i] = 0;
      200:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      150:  143:	  state->deck[i][j] = estate;
      150:  144:	  state->deckCount[i]++;
        -:  145:	}
      400:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      350:  148:	  state->deck[i][j] = copper;
      350:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       75:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       50:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       75:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       50:  166:      state->handCount[i] = 0;
       50:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      700:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      675:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       25:  182:  state->outpostPlayed = 0;
       25:  183:  state->phase = 0;
       25:  184:  state->numActions = 1;
       25:  185:  state->numBuys = 1;
       25:  186:  state->playedCardCount = 0;
       25:  187:  state->whoseTurn = 0;
       25:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      150:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      125:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       25:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       25:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 50 returned 100% blocks executed 94%
       50:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       50:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       50:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       50:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      600:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      500:  216:    newDeck[newDeckPos] = state->deck[player][card];
      500:  217:    newDeckPos++;
     1750:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     1250:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      500:  221:    state->deckCount[player]--;
        -:  222:  }
      550:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      500:  224:    state->deck[player][i] = newDeck[i];
      500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       50:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 20 returned 100% blocks executed 100%
       20:  315:int handCard(int handPos, struct gameState *state) {
       20:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 45 returned 100% blocks executed 100%
       45:  346:int whoseTurn(struct gameState *state) {
       45:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 125 returned 100% blocks executed 38%
      125:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      125:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      125:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      125:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      125:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      125:  576:    state->deckCount[player]--;
      125:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      125:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 45 returned 100% blocks executed 27%
       45:  583:int getCost(int cardNumber)
        -:  584:{
       45:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 9%
branch  8 taken 18%
branch  9 taken 18%
branch 10 taken 18%
branch 11 taken 18%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 20%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
        8:  604:      return 5;
        -:  605:    case feast:
        8:  606:      return 4;
        -:  607:    case gardens:
        8:  608:      return 4;
        -:  609:    case mine:
        8:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
        9:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647://Assignment 2 - Refactored code: 5 cards implemented as functions
        -:  648:
function AdventurerFunc called 0 returned 0% blocks executed 0%
    #####:  649:int AdventurerFunc(struct gameState* state, int currentPlayer)
        -:  650:{
    #####:  651:      int drawntreasure = 0;
        -:  652:      int cardDrawn;
        -:  653:      int temphand[MAX_HAND];
    #####:  654:      int z = 0;	// this is the counter for the temp hand
        -:  655:
    #####:  656:      while(drawntreasure<=2){
branch  0 never executed
branch  1 never executed
    #####:  657:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  658:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  659:	}
    #####:  660:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  661:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  662:	if (cardDrawn == province || cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  663:	  drawntreasure++;
        -:  664:	else{
    #####:  665:	  temphand[z]=cardDrawn;
    #####:  666:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  667:	  z++;
        -:  668:	}
        -:  669:      }
    #####:  670:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  671:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  672:	z=z-1;
        -:  673:      }
    #####:  674:      return 0;
        -:  675:}
        -:  676:
function SmithyFunc called 0 returned 0% blocks executed 0%
    #####:  677:int SmithyFunc(struct gameState* state, int currentPlayer, int handPos)
        -:  678:{
    #####:  679:      int i = 0;
        -:  680:
    #####:  681:      for (i = 3; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  682:	{
    #####:  683:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  684:	}
        -:  685:			
        -:  686:      //discard card from hand
    #####:  687:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  688:
    #####:  689:      return 0;
        -:  690:}
        -:  691:
        -:  692:
function OutpostFunc called 0 returned 0% blocks executed 0%
    #####:  693:int OutpostFunc(struct gameState* state, int currentPlayer, int handPos)
        -:  694:{
        -:  695:      //set outpost flag
    #####:  696:      state->outpostPlayed = 0;
        -:  697:			
        -:  698:      //discard card
    #####:  699:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  700:      return 0;
        -:  701:}
        -:  702:
        -:  703:
function MineFunc called 0 returned 0% blocks executed 0%
    #####:  704:int MineFunc(struct gameState* state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  705:{
    #####:  706:      int i = 0;
    #####:  707:      int j = 0;
        -:  708:
    #####:  709:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  710:
    #####:  711:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  712:	{
    #####:  713:	  return -1;
        -:  714:	}
        -:  715:		
    #####:  716:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  717:	{
    #####:  718:	  return -1;
        -:  719:	}
        -:  720:
    #####:  721:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  722:	{
    #####:  723:	  return -1;
        -:  724:	}
        -:  725:
    #####:  726:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  727:
        -:  728:      //discard card from hand
    #####:  729:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  730:
        -:  731:      //discard trashed card
    #####:  732:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  733:	{
    #####:  734:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  735:	    {
    #####:  736:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  737:	      break;
        -:  738:	    }
        -:  739:	}
        -:  740:			
    #####:  741:      return 0;
        -:  742:}
        -:  743:
        -:  744:
function MinionFunc called 0 returned 0% blocks executed 0%
    #####:  745:int MinionFunc(struct gameState* state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  746:{
    #####:  747:      int i = 0;
    #####:  748:      int j = 0;
        -:  749:
        -:  750:      //+1 action
    #####:  751:      state->numActions++;
        -:  752:			
        -:  753:      //discard card from hand
    #####:  754:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  755:			
    #####:  756:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  757:	{
    #####:  758:	  state->coins = state->coins + 2;
        -:  759:	}
        -:  760:			
    #####:  761:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  762:	{
        -:  763:	  //discard hand
    #####:  764:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  765:	    {
    #####:  766:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  767:	    }
        -:  768:				
        -:  769:	  //draw 4
    #####:  770:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  771:	    {
    #####:  772:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  773:	    }
        -:  774:				
        -:  775:	  //other players discard hand and redraw if hand size > 4
    #####:  776:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	    {
    #####:  778:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  779:		{
    #####:  780:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  781:		    {
        -:  782:		      //discard hand
    #####:  783:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  784:			{
    #####:  785:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  786:			}
        -:  787:							
        -:  788:		      //draw 4
    #####:  789:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  790:			{
    #####:  791:			  drawCard(i, state);
call    0 never executed
        -:  792:			}
        -:  793:		    }
        -:  794:		}
        -:  795:	    }
        -:  796:				
        -:  797:	}
    #####:  798:      return 0;
        -:  799:}
        -:  800:
        -:  801:
        -:  802://Card effect function
function cardEffect called 25 returned 100% blocks executed 5%
       25:  803:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  804:{
        -:  805:  int i;
        -:  806:  int j;
        -:  807:  int k;
        -:  808:  int x;
        -:  809:  int index;
       25:  810:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       25:  811:  int nextPlayer = currentPlayer + 1;
        -:  812:
       25:  813:  int tributeRevealedCards[2] = {-1, -1};
        -:  814:  int temphand[MAX_HAND];// moved above the if statement
        -:  815:  //int drawntreasure=0;	//declaration moved to AdventurerFunc()
        -:  816:  //int cardDrawn;		//declaration moved to AdventurerFunc()
        -:  817:  //int z = 0;// this is the counter for the temp hand ... declaration moved to AdventurerFunc()
       25:  818:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  819:    nextPlayer = 0;
        -:  820:  }
        -:  821:  
        -:  822:	
        -:  823:  //uses switch to select card and perform actions
       25:  824:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 100%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  825:    {
        -:  826:    case adventurer:
        -:  827:
    #####:  828:	AdventurerFunc(state, currentPlayer);
call    0 never executed
    #####:  829:	return 0;
        -:  830:
        -:  831:      /*while(drawntreasure<2){
        -:  832:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  833:	  shuffle(currentPlayer, state);
        -:  834:	}
        -:  835:	drawCard(currentPlayer, state);
        -:  836:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  837:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  838:	  drawntreasure++;
        -:  839:	else{
        -:  840:	  temphand[z]=cardDrawn;
        -:  841:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  842:	  z++;
        -:  843:	}
        -:  844:      }
        -:  845:      while(z-1>=0){
        -:  846:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  847:	z=z-1;
        -:  848:      }
        -:  849:      return 0;*/
        -:  850:			
        -:  851:    case council_room:
        -:  852:      //+4 Cards
    #####:  853:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  854:	{
    #####:  855:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  856:	}
        -:  857:			
        -:  858:      //+1 Buy
    #####:  859:      state->numBuys++;
        -:  860:			
        -:  861:      //Each other player draws a card
    #####:  862:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  863:	{
    #####:  864:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  865:	    {
    #####:  866:	      drawCard(i, state);
call    0 never executed
        -:  867:	    }
        -:  868:	}
        -:  869:			
        -:  870:      //put played card in played card pile
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  872:			
    #####:  873:      return 0;
        -:  874:			
        -:  875:    case feast:
        -:  876:      //gain card with cost up to 5
        -:  877:      //Backup hand
    #####:  878:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  879:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  880:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  881:      }
        -:  882:      //Backup hand
        -:  883:
        -:  884:      //Update Coins for Buy
    #####:  885:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  886:      x = 1;//Condition to loop on
    #####:  887:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  888:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  889:	  if (DEBUG)
        -:  890:	    printf("None of that card left, sorry!\n");
        -:  891:
        -:  892:	  if (DEBUG){
        -:  893:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  894:	  }
        -:  895:	}
    #####:  896:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  897:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  901:	  }
        -:  902:	}
        -:  903:	else{
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  907:	  }
        -:  908:
    #####:  909:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  910:	  x = 0;//No more buying cards
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
        -:  916:	}
        -:  917:      }     
        -:  918:
        -:  919:      //Reset Hand
    #####:  920:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  921:	state->hand[currentPlayer][i] = temphand[i];
    #####:  922:	temphand[i] = -1;
        -:  923:      }
        -:  924:      //Reset Hand
        -:  925:      			
    #####:  926:      return 0;
        -:  927:			
        -:  928:    case gardens:
    #####:  929:      return -1;
        -:  930:			
        -:  931:    case mine:
        -:  932:
    #####:  933:      MineFunc(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  934:      return 0;
        -:  935:
        -:  936:      /*j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
        -:  938:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:	{
        -:  940:	  return -1;
        -:  941:	}
        -:  942:		
        -:  943:      if (choice2 > treasure_map || choice2 < curse)
        -:  944:	{
        -:  945:	  return -1;
        -:  946:	}
        -:  947:
        -:  948:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  949:	{
        -:  950:	  return -1;
        -:  951:	}
        -:  952:
        -:  953:      gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:      //discard card from hand
        -:  956:      discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:      //discard trashed card
        -:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
        -:  961:	  if (state->hand[currentPlayer][i] == j)
        -:  962:	    {
        -:  963:	      discardCard(i, currentPlayer, state, 0);			
        -:  964:	      break;
        -:  965:	    }
        -:  966:	}
        -:  967:			
        -:  968:      return 0;*/
        -:  969:			
        -:  970:    case remodel:
    #####:  971:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:      //discard card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:      //discard trashed card
    #####:  984:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  989:	      break;
        -:  990:	    }
        -:  991:	}
        -:  992:
        -:  993:
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case smithy:
        -:  997:      
    #####:  998:      SmithyFunc(state, currentPlayer, handPos);
call    0 never executed
    #####:  999:      return 0;
        -: 1000:
        -: 1001:      //+3 Cards
        -: 1002:      /*for (i = 0; i < 3; i++)
        -: 1003:	{
        -: 1004:	  drawCard(currentPlayer, state);
        -: 1005:	}
        -: 1006:			
        -: 1007:      //discard card from hand
        -: 1008:      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:      return 0;*/
        -: 1010:		
        -: 1011:    case village:
        -: 1012:      //+1 Card
    #####: 1013:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:			
        -: 1015:      //+2 Actions
    #####: 1016:      state->numActions = state->numActions + 2;
        -: 1017:			
        -: 1018:      //discard played card from hand
    #####: 1019:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1020:      return 0;
        -: 1021:		
        -: 1022:    case baron:
    #####: 1023:      state->numBuys++;//Increase buys by 1!
    #####: 1024:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1025:	int p = 0;//Iterator for hand!
    #####: 1026:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1027:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1028:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1029:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1030:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1031:	    state->discardCount[currentPlayer]++;
    #####: 1032:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1033:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1034:	    }
    #####: 1035:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1036:	    state->handCount[currentPlayer]--;
    #####: 1037:	    card_not_discarded = 0;//Exit the loop
        -: 1038:	  }
    #####: 1039:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1040:	    if(DEBUG) {
        -: 1041:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1042:	      printf("Must gain an estate if there are any\n");
        -: 1043:	    }
    #####: 1044:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1045:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1046:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1047:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1048:		isGameOver(state);
call    0 never executed
        -: 1049:	      }
        -: 1050:	    }
    #####: 1051:	    card_not_discarded = 0;//Exit the loop
        -: 1052:	  }
        -: 1053:			    
        -: 1054:	  else{
    #####: 1055:	    p++;//Next card
        -: 1056:	  }
        -: 1057:	}
        -: 1058:      }
        -: 1059:			    
        -: 1060:      else{
    #####: 1061:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1062:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1063:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1064:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1065:	    isGameOver(state);
call    0 never executed
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
        -: 1070:      
    #####: 1071:      return 0;
        -: 1072:		
        -: 1073:    case great_hall:
        -: 1074:      //+1 Card
    #####: 1075:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1076:			
        -: 1077:      //+1 Actions
    #####: 1078:      state->numActions++;
        -: 1079:			
        -: 1080:      //discard card from hand
    #####: 1081:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case minion:
        -: 1085:
    #####: 1086:      MinionFunc(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:      //+1 action
        -: 1090:      /*state->numActions++;
        -: 1091:			
        -: 1092:      //discard card from hand
        -: 1093:      discardCard(handPos, currentPlayer, state, 0);
        -: 1094:			
        -: 1095:      if (choice1)		//+2 coins
        -: 1096:	{
        -: 1097:	  state->coins = state->coins + 2;
        -: 1098:	}
        -: 1099:			
        -: 1100:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1101:	{
        -: 1102:	  //discard hand
        -: 1103:	  while(numHandCards(state) > 0)
        -: 1104:	    {
        -: 1105:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1106:	    }
        -: 1107:				
        -: 1108:	  //draw 4
        -: 1109:	  for (i = 0; i < 4; i++)
        -: 1110:	    {
        -: 1111:	      drawCard(currentPlayer, state);
        -: 1112:	    }
        -: 1113:				
        -: 1114:	  //other players discard hand and redraw if hand size > 4
        -: 1115:	  for (i = 0; i < state->numPlayers; i++)
        -: 1116:	    {
        -: 1117:	      if (i != currentPlayer)
        -: 1118:		{
        -: 1119:		  if ( state->handCount[i] > 4 )
        -: 1120:		    {
        -: 1121:		      //discard hand
        -: 1122:		      while( state->handCount[i] > 0 )
        -: 1123:			{
        -: 1124:			  discardCard(handPos, i, state, 0);
        -: 1125:			}
        -: 1126:							
        -: 1127:		      //draw 4
        -: 1128:		      for (j = 0; j < 4; j++)
        -: 1129:			{
        -: 1130:			  drawCard(i, state);
        -: 1131:			}
        -: 1132:		    }
        -: 1133:		}
        -: 1134:	    }
        -: 1135:				
        -: 1136:	}
        -: 1137:      return 0;*/
        -: 1138:		
        -: 1139:    case steward:
    #####: 1140:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
        -: 1142:	  //+2 cards
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1144:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1145:	}
    #####: 1146:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
        -: 1148:	  //+2 coins
    #####: 1149:	  state->coins = state->coins + 2;
        -: 1150:	}
        -: 1151:      else
        -: 1152:	{
        -: 1153:	  //trash 2 cards in hand
    #####: 1154:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1156:	}
        -: 1157:			
        -: 1158:      //discard card from hand
    #####: 1159:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case tribute:
    #####: 1163:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1165:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1166:	  state->deckCount[nextPlayer]--;
        -: 1167:	}
    #####: 1168:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1169:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1170:	  state->discardCount[nextPlayer]--;
        -: 1171:	}
        -: 1172:	else{
        -: 1173:	  //No Card to Reveal
        -: 1174:	  if (DEBUG){
        -: 1175:	    printf("No cards to reveal\n");
        -: 1176:	  }
        -: 1177:	}
        -: 1178:      }
        -: 1179:	    
        -: 1180:      else{
    #####: 1181:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1182:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1183:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1184:	    state->deckCount[nextPlayer]++;
    #####: 1185:	    state->discard[nextPlayer][i] = -1;
    #####: 1186:	    state->discardCount[nextPlayer]--;
        -: 1187:	  }
        -: 1188:			    
    #####: 1189:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1190:	} 
    #####: 1191:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1192:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:	state->deckCount[nextPlayer]--;
    #####: 1194:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1195:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1196:	state->deckCount[nextPlayer]--;
        -: 1197:      }    
        -: 1198:		       
    #####: 1199:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1200:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1201:	state->playedCardCount++;
    #####: 1202:	tributeRevealedCards[1] = -1;
        -: 1203:      }
        -: 1204:
    #####: 1205:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1207:	  state->coins += 2;
        -: 1208:	}
        -: 1209:		    
    #####: 1210:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1211:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1212:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1213:	}
        -: 1214:	else{//Action Card
    #####: 1215:	  state->numActions = state->numActions + 2;
        -: 1216:	}
        -: 1217:      }
        -: 1218:	    
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case ambassador:
    #####: 1222:      j = 0;		//used to check if player has enough cards to discard
        -: 1223:
    #####: 1224:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	{
    #####: 1226:	  return -1;				
        -: 1227:	}
        -: 1228:
    #####: 1229:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  return -1;
        -: 1232:	}
        -: 1233:
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1237:	    {
    #####: 1238:	      j++;
        -: 1239:	    }
        -: 1240:	}
    #####: 1241:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
    #####: 1243:	  return -1;				
        -: 1244:	}
        -: 1245:
        -: 1246:      if (DEBUG) 
        -: 1247:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1248:
        -: 1249:      //increase supply count for choosen card by amount being discarded
    #####: 1250:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1251:			
        -: 1252:      //each other player gains a copy of revealed card
    #####: 1253:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1254:	{
    #####: 1255:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1256:	    {
    #####: 1257:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1258:	    }
        -: 1259:	}
        -: 1260:
        -: 1261:      //discard played card from hand
    #####: 1262:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1263:
        -: 1264:      //trash copies of cards returned to supply
    #####: 1265:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1266:	{
    #####: 1267:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:	    {
    #####: 1269:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1270:		{
    #####: 1271:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1272:		  break;
        -: 1273:		}
        -: 1274:	    }
        -: 1275:	}			
        -: 1276:
    #####: 1277:      return 0;
        -: 1278:		
        -: 1279:    case cutpurse:
        -: 1280:
    #####: 1281:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1282:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:	{
    #####: 1284:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1285:	    {
    #####: 1286:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1287:		{
    #####: 1288:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1289:		    {
    #####: 1290:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1291:		      break;
        -: 1292:		    }
    #####: 1293:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1294:		    {
    #####: 1295:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1296:			{
        -: 1297:			  if (DEBUG)
        -: 1298:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1299:			}	
    #####: 1300:		      break;
        -: 1301:		    }		
        -: 1302:		}
        -: 1303:					
        -: 1304:	    }
        -: 1305:				
        -: 1306:	}				
        -: 1307:
        -: 1308:      //discard played card from hand
    #####: 1309:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1310:
    #####: 1311:      return 0;
        -: 1312:
        -: 1313:		
        -: 1314:    case embargo: 
        -: 1315:      //+2 Coins
    #####: 1316:      state->coins = state->coins + 2;
        -: 1317:			
        -: 1318:      //see if selected pile is in play
    #####: 1319:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1320:	{
    #####: 1321:	  return -1;
        -: 1322:	}
        -: 1323:			
        -: 1324:      //add embargo token to selected supply pile
    #####: 1325:      state->embargoTokens[choice1]++;
        -: 1326:			
        -: 1327:      //trash card
    #####: 1328:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1329:      return 0;
        -: 1330:		
        -: 1331:    case outpost:
        -: 1332:
    #####: 1333:      OutpostFunc(state, currentPlayer, handPos);
call    0 never executed
    #####: 1334:      return 0;
        -: 1335:
        -: 1336:      //set outpost flag
        -: 1337:      /*state->outpostPlayed++;
        -: 1338:			
        -: 1339:      //discard card
        -: 1340:      discardCard(handPos, currentPlayer, state, 0);
        -: 1341:      return 0;*/
        -: 1342:		
        -: 1343:    case salvager:
        -: 1344:      //+1 buy
       25: 1345:      state->numBuys++;
        -: 1346:			
       25: 1347:      if (choice1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1348:	{
        -: 1349:	  //gain coins equal to trashed card
       20: 1350:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1351:	  //trash card
       20: 1352:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1353:	}
        -: 1354:			
        -: 1355:      //discard card
       25: 1356:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       25: 1357:      return 0;
        -: 1358:		
        -: 1359:    case sea_hag:
    #####: 1360:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1361:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1362:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1363:	  state->discardCount[i]++;
    #####: 1364:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1365:	}
        -: 1366:      }
    #####: 1367:      return 0;
        -: 1368:		
        -: 1369:    case treasure_map:
        -: 1370:      //search hand for another treasure_map
    #####: 1371:      index = -1;
    #####: 1372:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1373:	{
    #####: 1374:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1375:	    {
    #####: 1376:	      index = i;
    #####: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
    #####: 1380:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1381:	{
        -: 1382:	  //trash both treasure cards
    #####: 1383:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1384:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1385:
        -: 1386:	  //gain 4 Gold cards
    #####: 1387:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1388:	    {
    #####: 1389:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1390:	    }
        -: 1391:				
        -: 1392:	  //return success
    #####: 1393:	  return 1;
        -: 1394:	}
        -: 1395:			
        -: 1396:      //no second treasure_map found in hand
    #####: 1397:      return -1;
        -: 1398:    }
        -: 1399:	
    #####: 1400:  return -1;
        -: 1401:}
        -: 1402:
function discardCard called 45 returned 100% blocks executed 89%
       45: 1403:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1404:{
        -: 1405:	
        -: 1406:  //if card is not trashed, added to Played pile 
       45: 1407:  if (trashFlag < 1)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -: 1408:    {
        -: 1409:      //add card to played pile
       25: 1410:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       25: 1411:      state->playedCardCount++;
        -: 1412:    }
        -: 1413:	
        -: 1414:  //set played card to -1
       45: 1415:  state->hand[currentPlayer][handPos] = -1;
        -: 1416:	
        -: 1417:  //remove card from player's hand
       45: 1418:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1419:    {
        -: 1420:      //reduce number of cards in hand
       10: 1421:      state->handCount[currentPlayer]--;
        -: 1422:    }
       35: 1423:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:    {
        -: 1425:      //reduce number of cards in hand
    #####: 1426:      state->handCount[currentPlayer]--;
        -: 1427:    }
        -: 1428:  else 	
        -: 1429:    {
        -: 1430:      //replace discarded card with last card in hand
       35: 1431:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1432:      //set last card to -1
       35: 1433:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1434:      //reduce number of cards in hand
       35: 1435:      state->handCount[currentPlayer]--;
        -: 1436:    }
        -: 1437:	
       45: 1438:  return 0;
        -: 1439:}
        -: 1440:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1441:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1442:{
        -: 1443:  //Note: supplyPos is enum of choosen card
        -: 1444:	
        -: 1445:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1446:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1447:    {
    #####: 1448:      return -1;
        -: 1449:    }
        -: 1450:	
        -: 1451:  //added card for [whoseTurn] current player:
        -: 1452:  // toFlag = 0 : add to discard
        -: 1453:  // toFlag = 1 : add to deck
        -: 1454:  // toFlag = 2 : add to hand
        -: 1455:
    #####: 1456:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1457:    {
    #####: 1458:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1459:      state->deckCount[player]++;
        -: 1460:    }
    #####: 1461:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1462:    {
    #####: 1463:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1464:      state->handCount[player]++;
        -: 1465:    }
        -: 1466:  else
        -: 1467:    {
    #####: 1468:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1469:      state->discardCount[player]++;
        -: 1470:    }
        -: 1471:	
        -: 1472:  //decrease number in supply pile
    #####: 1473:  state->supplyCount[supplyPos]--;
        -: 1474:	 
    #####: 1475:  return 0;
        -: 1476:}
        -: 1477:
function updateCoins called 25 returned 100% blocks executed 82%
       25: 1478:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1479:{
        -: 1480:  int i;
        -: 1481:	
        -: 1482:  //reset coin count
       25: 1483:  state->coins = 0;
        -: 1484:
        -: 1485:  //add coins for each Treasure card in player's hand
      150: 1486:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1487:    {
      125: 1488:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1489:	{
      100: 1490:	  state->coins += 1;
        -: 1491:	}
       25: 1492:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1493:	{
    #####: 1494:	  state->coins += 2;
        -: 1495:	}
       25: 1496:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1497:	{
    #####: 1498:	  state->coins += 3;
        -: 1499:	}	
        -: 1500:    }	
        -: 1501:
        -: 1502:  //add bonus
       25: 1503:  state->coins += bonus;
        -: 1504:
       25: 1505:  return 0;
        -: 1506:}
        -: 1507:
        -: 1508:
        -: 1509://end of dominion.c
        -: 1510:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 750 returned 100% blocks executed 83%
      750:    8:int compare(const void* a, const void* b) {
      750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      200:   12:    return -1;
      550:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 25 returned 100% blocks executed 88%
       25:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       25:   44:  SelectStream(1);
call    0 returned 100%
       25:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       25:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       25:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      275:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2750:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       25:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       25:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       25:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       25:   89:      state->supplyCount[estate] = 8;
       25:   90:      state->supplyCount[duchy] = 8;
       25:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       25:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       25:  102:  state->supplyCount[silver] = 40;
       25:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      525:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     4125:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3875:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      250:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      100:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       50:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      200:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      250:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3625:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       75:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       50:  140:      state->deckCount[i] = 0;
      200:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      150:  143:	  state->deck[i][j] = estate;
      150:  144:	  state->deckCount[i]++;
        -:  145:	}
      400:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      350:  148:	  state->deck[i][j] = copper;
      350:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       75:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       50:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       75:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       50:  166:      state->handCount[i] = 0;
       50:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      700:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      675:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       25:  182:  state->outpostPlayed = 0;
       25:  183:  state->phase = 0;
       25:  184:  state->numActions = 1;
       25:  185:  state->numBuys = 1;
       25:  186:  state->playedCardCount = 0;
       25:  187:  state->whoseTurn = 0;
       25:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      150:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      125:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       25:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       25:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 50 returned 100% blocks executed 94%
       50:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       50:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       50:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       50:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      600:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      500:  216:    newDeck[newDeckPos] = state->deck[player][card];
      500:  217:    newDeckPos++;
     1750:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     1250:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      500:  221:    state->deckCount[player]--;
        -:  222:  }
      550:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      500:  224:    state->deck[player][i] = newDeck[i];
      500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       50:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 20 returned 100% blocks executed 100%
       20:  315:int handCard(int handPos, struct gameState *state) {
       20:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 45 returned 100% blocks executed 100%
       45:  346:int whoseTurn(struct gameState *state) {
       45:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 125 returned 100% blocks executed 38%
      125:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      125:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      125:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      125:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      125:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      125:  576:    state->deckCount[player]--;
      125:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      125:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 45 returned 100% blocks executed 27%
       45:  583:int getCost(int cardNumber)
        -:  584:{
       45:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 9%
branch  8 taken 18%
branch  9 taken 18%
branch 10 taken 18%
branch 11 taken 18%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 20%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
        8:  604:      return 5;
        -:  605:    case feast:
        8:  606:      return 4;
        -:  607:    case gardens:
        8:  608:      return 4;
        -:  609:    case mine:
        8:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
        9:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647://Assignment 2 - Refactored code: 5 cards implemented as functions
        -:  648:
function AdventurerFunc called 0 returned 0% blocks executed 0%
    #####:  649:int AdventurerFunc(struct gameState* state, int currentPlayer)
        -:  650:{
    #####:  651:      int drawntreasure = 0;
        -:  652:      int cardDrawn;
        -:  653:      int temphand[MAX_HAND];
    #####:  654:      int z = 0;	// this is the counter for the temp hand
        -:  655:
    #####:  656:      while(drawntreasure<=2){
branch  0 never executed
branch  1 never executed
    #####:  657:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  658:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  659:	}
    #####:  660:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  661:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  662:	if (cardDrawn == province || cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  663:	  drawntreasure++;
        -:  664:	else{
    #####:  665:	  temphand[z]=cardDrawn;
    #####:  666:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  667:	  z++;
        -:  668:	}
        -:  669:      }
    #####:  670:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  671:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  672:	z=z-1;
        -:  673:      }
    #####:  674:      return 0;
        -:  675:}
        -:  676:
function SmithyFunc called 0 returned 0% blocks executed 0%
    #####:  677:int SmithyFunc(struct gameState* state, int currentPlayer, int handPos)
        -:  678:{
    #####:  679:      int i = 0;
        -:  680:
    #####:  681:      for (i = 3; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  682:	{
    #####:  683:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  684:	}
        -:  685:			
        -:  686:      //discard card from hand
    #####:  687:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  688:
    #####:  689:      return 0;
        -:  690:}
        -:  691:
        -:  692:
function OutpostFunc called 0 returned 0% blocks executed 0%
    #####:  693:int OutpostFunc(struct gameState* state, int currentPlayer, int handPos)
        -:  694:{
        -:  695:      //set outpost flag
    #####:  696:      state->outpostPlayed = 0;
        -:  697:			
        -:  698:      //discard card
    #####:  699:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  700:      return 0;
        -:  701:}
        -:  702:
        -:  703:
function MineFunc called 0 returned 0% blocks executed 0%
    #####:  704:int MineFunc(struct gameState* state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  705:{
    #####:  706:      int i = 0;
    #####:  707:      int j = 0;
        -:  708:
    #####:  709:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  710:
    #####:  711:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  712:	{
    #####:  713:	  return -1;
        -:  714:	}
        -:  715:		
    #####:  716:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  717:	{
    #####:  718:	  return -1;
        -:  719:	}
        -:  720:
    #####:  721:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  722:	{
    #####:  723:	  return -1;
        -:  724:	}
        -:  725:
    #####:  726:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  727:
        -:  728:      //discard card from hand
    #####:  729:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  730:
        -:  731:      //discard trashed card
    #####:  732:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  733:	{
    #####:  734:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  735:	    {
    #####:  736:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  737:	      break;
        -:  738:	    }
        -:  739:	}
        -:  740:			
    #####:  741:      return 0;
        -:  742:}
        -:  743:
        -:  744:
function MinionFunc called 0 returned 0% blocks executed 0%
    #####:  745:int MinionFunc(struct gameState* state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  746:{
    #####:  747:      int i = 0;
    #####:  748:      int j = 0;
        -:  749:
        -:  750:      //+1 action
    #####:  751:      state->numActions++;
        -:  752:			
        -:  753:      //discard card from hand
    #####:  754:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  755:			
    #####:  756:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  757:	{
    #####:  758:	  state->coins = state->coins + 2;
        -:  759:	}
        -:  760:			
    #####:  761:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  762:	{
        -:  763:	  //discard hand
    #####:  764:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  765:	    {
    #####:  766:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  767:	    }
        -:  768:				
        -:  769:	  //draw 4
    #####:  770:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  771:	    {
    #####:  772:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  773:	    }
        -:  774:				
        -:  775:	  //other players discard hand and redraw if hand size > 4
    #####:  776:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	    {
    #####:  778:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  779:		{
    #####:  780:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  781:		    {
        -:  782:		      //discard hand
    #####:  783:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  784:			{
    #####:  785:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  786:			}
        -:  787:							
        -:  788:		      //draw 4
    #####:  789:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  790:			{
    #####:  791:			  drawCard(i, state);
call    0 never executed
        -:  792:			}
        -:  793:		    }
        -:  794:		}
        -:  795:	    }
        -:  796:				
        -:  797:	}
    #####:  798:      return 0;
        -:  799:}
        -:  800:
        -:  801:
        -:  802://Card effect function
function cardEffect called 25 returned 100% blocks executed 5%
       25:  803:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  804:{
        -:  805:  int i;
        -:  806:  int j;
        -:  807:  int k;
        -:  808:  int x;
        -:  809:  int index;
       25:  810:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       25:  811:  int nextPlayer = currentPlayer + 1;
        -:  812:
       25:  813:  int tributeRevealedCards[2] = {-1, -1};
        -:  814:  int temphand[MAX_HAND];// moved above the if statement
        -:  815:  //int drawntreasure=0;	//declaration moved to AdventurerFunc()
        -:  816:  //int cardDrawn;		//declaration moved to AdventurerFunc()
        -:  817:  //int z = 0;// this is the counter for the temp hand ... declaration moved to AdventurerFunc()
       25:  818:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  819:    nextPlayer = 0;
        -:  820:  }
        -:  821:  
        -:  822:	
        -:  823:  //uses switch to select card and perform actions
       25:  824:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 100%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  825:    {
        -:  826:    case adventurer:
        -:  827:
    #####:  828:	AdventurerFunc(state, currentPlayer);
call    0 never executed
    #####:  829:	return 0;
        -:  830:
        -:  831:      /*while(drawntreasure<2){
        -:  832:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  833:	  shuffle(currentPlayer, state);
        -:  834:	}
        -:  835:	drawCard(currentPlayer, state);
        -:  836:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  837:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  838:	  drawntreasure++;
        -:  839:	else{
        -:  840:	  temphand[z]=cardDrawn;
        -:  841:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  842:	  z++;
        -:  843:	}
        -:  844:      }
        -:  845:      while(z-1>=0){
        -:  846:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  847:	z=z-1;
        -:  848:      }
        -:  849:      return 0;*/
        -:  850:			
        -:  851:    case council_room:
        -:  852:      //+4 Cards
    #####:  853:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  854:	{
    #####:  855:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  856:	}
        -:  857:			
        -:  858:      //+1 Buy
    #####:  859:      state->numBuys++;
        -:  860:			
        -:  861:      //Each other player draws a card
    #####:  862:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  863:	{
    #####:  864:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  865:	    {
    #####:  866:	      drawCard(i, state);
call    0 never executed
        -:  867:	    }
        -:  868:	}
        -:  869:			
        -:  870:      //put played card in played card pile
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  872:			
    #####:  873:      return 0;
        -:  874:			
        -:  875:    case feast:
        -:  876:      //gain card with cost up to 5
        -:  877:      //Backup hand
    #####:  878:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  879:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  880:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  881:      }
        -:  882:      //Backup hand
        -:  883:
        -:  884:      //Update Coins for Buy
    #####:  885:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  886:      x = 1;//Condition to loop on
    #####:  887:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  888:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  889:	  if (DEBUG)
        -:  890:	    printf("None of that card left, sorry!\n");
        -:  891:
        -:  892:	  if (DEBUG){
        -:  893:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  894:	  }
        -:  895:	}
    #####:  896:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  897:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  901:	  }
        -:  902:	}
        -:  903:	else{
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  907:	  }
        -:  908:
    #####:  909:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  910:	  x = 0;//No more buying cards
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
        -:  916:	}
        -:  917:      }     
        -:  918:
        -:  919:      //Reset Hand
    #####:  920:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  921:	state->hand[currentPlayer][i] = temphand[i];
    #####:  922:	temphand[i] = -1;
        -:  923:      }
        -:  924:      //Reset Hand
        -:  925:      			
    #####:  926:      return 0;
        -:  927:			
        -:  928:    case gardens:
    #####:  929:      return -1;
        -:  930:			
        -:  931:    case mine:
        -:  932:
    #####:  933:      MineFunc(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####:  934:      return 0;
        -:  935:
        -:  936:      /*j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
        -:  938:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  939:	{
        -:  940:	  return -1;
        -:  941:	}
        -:  942:		
        -:  943:      if (choice2 > treasure_map || choice2 < curse)
        -:  944:	{
        -:  945:	  return -1;
        -:  946:	}
        -:  947:
        -:  948:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  949:	{
        -:  950:	  return -1;
        -:  951:	}
        -:  952:
        -:  953:      gainCard(choice2, state, 2, currentPlayer);
        -:  954:
        -:  955:      //discard card from hand
        -:  956:      discardCard(handPos, currentPlayer, state, 0);
        -:  957:
        -:  958:      //discard trashed card
        -:  959:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  960:	{
        -:  961:	  if (state->hand[currentPlayer][i] == j)
        -:  962:	    {
        -:  963:	      discardCard(i, currentPlayer, state, 0);			
        -:  964:	      break;
        -:  965:	    }
        -:  966:	}
        -:  967:			
        -:  968:      return 0;*/
        -:  969:			
        -:  970:    case remodel:
    #####:  971:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  972:
    #####:  973:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  979:
        -:  980:      //discard card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  982:
        -:  983:      //discard trashed card
    #####:  984:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  989:	      break;
        -:  990:	    }
        -:  991:	}
        -:  992:
        -:  993:
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case smithy:
        -:  997:      
    #####:  998:      SmithyFunc(state, currentPlayer, handPos);
call    0 never executed
    #####:  999:      return 0;
        -: 1000:
        -: 1001:      //+3 Cards
        -: 1002:      /*for (i = 0; i < 3; i++)
        -: 1003:	{
        -: 1004:	  drawCard(currentPlayer, state);
        -: 1005:	}
        -: 1006:			
        -: 1007:      //discard card from hand
        -: 1008:      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:      return 0;*/
        -: 1010:		
        -: 1011:    case village:
        -: 1012:      //+1 Card
    #####: 1013:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:			
        -: 1015:      //+2 Actions
    #####: 1016:      state->numActions = state->numActions + 2;
        -: 1017:			
        -: 1018:      //discard played card from hand
    #####: 1019:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1020:      return 0;
        -: 1021:		
        -: 1022:    case baron:
    #####: 1023:      state->numBuys++;//Increase buys by 1!
    #####: 1024:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1025:	int p = 0;//Iterator for hand!
    #####: 1026:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1027:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1028:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1029:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1030:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1031:	    state->discardCount[currentPlayer]++;
    #####: 1032:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1033:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1034:	    }
    #####: 1035:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1036:	    state->handCount[currentPlayer]--;
    #####: 1037:	    card_not_discarded = 0;//Exit the loop
        -: 1038:	  }
    #####: 1039:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1040:	    if(DEBUG) {
        -: 1041:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1042:	      printf("Must gain an estate if there are any\n");
        -: 1043:	    }
    #####: 1044:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1045:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1046:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1047:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1048:		isGameOver(state);
call    0 never executed
        -: 1049:	      }
        -: 1050:	    }
    #####: 1051:	    card_not_discarded = 0;//Exit the loop
        -: 1052:	  }
        -: 1053:			    
        -: 1054:	  else{
    #####: 1055:	    p++;//Next card
        -: 1056:	  }
        -: 1057:	}
        -: 1058:      }
        -: 1059:			    
        -: 1060:      else{
    #####: 1061:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1062:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1063:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1064:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1065:	    isGameOver(state);
call    0 never executed
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
        -: 1070:      
    #####: 1071:      return 0;
        -: 1072:		
        -: 1073:    case great_hall:
        -: 1074:      //+1 Card
    #####: 1075:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1076:			
        -: 1077:      //+1 Actions
    #####: 1078:      state->numActions++;
        -: 1079:			
        -: 1080:      //discard card from hand
    #####: 1081:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case minion:
        -: 1085:
    #####: 1086:      MinionFunc(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:      //+1 action
        -: 1090:      /*state->numActions++;
        -: 1091:			
        -: 1092:      //discard card from hand
        -: 1093:      discardCard(handPos, currentPlayer, state, 0);
        -: 1094:			
        -: 1095:      if (choice1)		//+2 coins
        -: 1096:	{
        -: 1097:	  state->coins = state->coins + 2;
        -: 1098:	}
        -: 1099:			
        -: 1100:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1101:	{
        -: 1102:	  //discard hand
        -: 1103:	  while(numHandCards(state) > 0)
        -: 1104:	    {
        -: 1105:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1106:	    }
        -: 1107:				
        -: 1108:	  //draw 4
        -: 1109:	  for (i = 0; i < 4; i++)
        -: 1110:	    {
        -: 1111:	      drawCard(currentPlayer, state);
        -: 1112:	    }
        -: 1113:				
        -: 1114:	  //other players discard hand and redraw if hand size > 4
        -: 1115:	  for (i = 0; i < state->numPlayers; i++)
        -: 1116:	    {
        -: 1117:	      if (i != currentPlayer)
        -: 1118:		{
        -: 1119:		  if ( state->handCount[i] > 4 )
        -: 1120:		    {
        -: 1121:		      //discard hand
        -: 1122:		      while( state->handCount[i] > 0 )
        -: 1123:			{
        -: 1124:			  discardCard(handPos, i, state, 0);
        -: 1125:			}
        -: 1126:							
        -: 1127:		      //draw 4
        -: 1128:		      for (j = 0; j < 4; j++)
        -: 1129:			{
        -: 1130:			  drawCard(i, state);
        -: 1131:			}
        -: 1132:		    }
        -: 1133:		}
        -: 1134:	    }
        -: 1135:				
        -: 1136:	}
        -: 1137:      return 0;*/
        -: 1138:		
        -: 1139:    case steward:
    #####: 1140:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
        -: 1142:	  //+2 cards
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1144:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1145:	}
    #####: 1146:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
        -: 1148:	  //+2 coins
    #####: 1149:	  state->coins = state->coins + 2;
        -: 1150:	}
        -: 1151:      else
        -: 1152:	{
        -: 1153:	  //trash 2 cards in hand
    #####: 1154:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1155:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1156:	}
        -: 1157:			
        -: 1158:      //discard card from hand
    #####: 1159:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case tribute:
    #####: 1163:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1165:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1166:	  state->deckCount[nextPlayer]--;
        -: 1167:	}
    #####: 1168:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1169:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1170:	  state->discardCount[nextPlayer]--;
        -: 1171:	}
        -: 1172:	else{
        -: 1173:	  //No Card to Reveal
        -: 1174:	  if (DEBUG){
        -: 1175:	    printf("No cards to reveal\n");
        -: 1176:	  }
        -: 1177:	}
        -: 1178:      }
        -: 1179:	    
        -: 1180:      else{
    #####: 1181:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1182:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1183:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1184:	    state->deckCount[nextPlayer]++;
    #####: 1185:	    state->discard[nextPlayer][i] = -1;
    #####: 1186:	    state->discardCount[nextPlayer]--;
        -: 1187:	  }
        -: 1188:			    
    #####: 1189:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1190:	} 
    #####: 1191:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1192:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:	state->deckCount[nextPlayer]--;
    #####: 1194:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1195:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1196:	state->deckCount[nextPlayer]--;
        -: 1197:      }    
        -: 1198:		       
    #####: 1199:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1200:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1201:	state->playedCardCount++;
    #####: 1202:	tributeRevealedCards[1] = -1;
        -: 1203:      }
        -: 1204:
    #####: 1205:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1206:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1207:	  state->coins += 2;
        -: 1208:	}
        -: 1209:		    
    #####: 1210:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1211:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1212:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1213:	}
        -: 1214:	else{//Action Card
    #####: 1215:	  state->numActions = state->numActions + 2;
        -: 1216:	}
        -: 1217:      }
        -: 1218:	    
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case ambassador:
    #####: 1222:      j = 0;		//used to check if player has enough cards to discard
        -: 1223:
    #####: 1224:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	{
    #####: 1226:	  return -1;				
        -: 1227:	}
        -: 1228:
    #####: 1229:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  return -1;
        -: 1232:	}
        -: 1233:
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1237:	    {
    #####: 1238:	      j++;
        -: 1239:	    }
        -: 1240:	}
    #####: 1241:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
    #####: 1243:	  return -1;				
        -: 1244:	}
        -: 1245:
        -: 1246:      if (DEBUG) 
        -: 1247:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1248:
        -: 1249:      //increase supply count for choosen card by amount being discarded
    #####: 1250:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1251:			
        -: 1252:      //each other player gains a copy of revealed card
    #####: 1253:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1254:	{
    #####: 1255:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1256:	    {
    #####: 1257:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1258:	    }
        -: 1259:	}
        -: 1260:
        -: 1261:      //discard played card from hand
    #####: 1262:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1263:
        -: 1264:      //trash copies of cards returned to supply
    #####: 1265:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1266:	{
    #####: 1267:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:	    {
    #####: 1269:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1270:		{
    #####: 1271:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1272:		  break;
        -: 1273:		}
        -: 1274:	    }
        -: 1275:	}			
        -: 1276:
    #####: 1277:      return 0;
        -: 1278:		
        -: 1279:    case cutpurse:
        -: 1280:
    #####: 1281:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1282:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:	{
    #####: 1284:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1285:	    {
    #####: 1286:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1287:		{
    #####: 1288:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1289:		    {
    #####: 1290:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1291:		      break;
        -: 1292:		    }
    #####: 1293:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1294:		    {
    #####: 1295:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1296:			{
        -: 1297:			  if (DEBUG)
        -: 1298:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1299:			}	
    #####: 1300:		      break;
        -: 1301:		    }		
        -: 1302:		}
        -: 1303:					
        -: 1304:	    }
        -: 1305:				
        -: 1306:	}				
        -: 1307:
        -: 1308:      //discard played card from hand
    #####: 1309:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1310:
    #####: 1311:      return 0;
        -: 1312:
        -: 1313:		
        -: 1314:    case embargo: 
        -: 1315:      //+2 Coins
    #####: 1316:      state->coins = state->coins + 2;
        -: 1317:			
        -: 1318:      //see if selected pile is in play
    #####: 1319:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1320:	{
    #####: 1321:	  return -1;
        -: 1322:	}
        -: 1323:			
        -: 1324:      //add embargo token to selected supply pile
    #####: 1325:      state->embargoTokens[choice1]++;
        -: 1326:			
        -: 1327:      //trash card
    #####: 1328:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1329:      return 0;
        -: 1330:		
        -: 1331:    case outpost:
        -: 1332:
    #####: 1333:      OutpostFunc(state, currentPlayer, handPos);
call    0 never executed
    #####: 1334:      return 0;
        -: 1335:
        -: 1336:      //set outpost flag
        -: 1337:      /*state->outpostPlayed++;
        -: 1338:			
        -: 1339:      //discard card
        -: 1340:      discardCard(handPos, currentPlayer, state, 0);
        -: 1341:      return 0;*/
        -: 1342:		
        -: 1343:    case salvager:
        -: 1344:      //+1 buy
       25: 1345:      state->numBuys++;
        -: 1346:			
       25: 1347:      if (choice1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1348:	{
        -: 1349:	  //gain coins equal to trashed card
       20: 1350:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1351:	  //trash card
       20: 1352:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1353:	}
        -: 1354:			
        -: 1355:      //discard card
       25: 1356:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       25: 1357:      return 0;
        -: 1358:		
        -: 1359:    case sea_hag:
    #####: 1360:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1361:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1362:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1363:	  state->discardCount[i]++;
    #####: 1364:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1365:	}
        -: 1366:      }
    #####: 1367:      return 0;
        -: 1368:		
        -: 1369:    case treasure_map:
        -: 1370:      //search hand for another treasure_map
    #####: 1371:      index = -1;
    #####: 1372:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1373:	{
    #####: 1374:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1375:	    {
    #####: 1376:	      index = i;
    #####: 1377:	      break;
        -: 1378:	    }
        -: 1379:	}
    #####: 1380:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1381:	{
        -: 1382:	  //trash both treasure cards
    #####: 1383:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1384:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1385:
        -: 1386:	  //gain 4 Gold cards
    #####: 1387:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1388:	    {
    #####: 1389:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1390:	    }
        -: 1391:				
        -: 1392:	  //return success
    #####: 1393:	  return 1;
        -: 1394:	}
        -: 1395:			
        -: 1396:      //no second treasure_map found in hand
    #####: 1397:      return -1;
        -: 1398:    }
        -: 1399:	
    #####: 1400:  return -1;
        -: 1401:}
        -: 1402:
function discardCard called 45 returned 100% blocks executed 89%
       45: 1403:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1404:{
        -: 1405:	
        -: 1406:  //if card is not trashed, added to Played pile 
       45: 1407:  if (trashFlag < 1)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -: 1408:    {
        -: 1409:      //add card to played pile
       25: 1410:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       25: 1411:      state->playedCardCount++;
        -: 1412:    }
        -: 1413:	
        -: 1414:  //set played card to -1
       45: 1415:  state->hand[currentPlayer][handPos] = -1;
        -: 1416:	
        -: 1417:  //remove card from player's hand
       45: 1418:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1419:    {
        -: 1420:      //reduce number of cards in hand
       10: 1421:      state->handCount[currentPlayer]--;
        -: 1422:    }
       35: 1423:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:    {
        -: 1425:      //reduce number of cards in hand
    #####: 1426:      state->handCount[currentPlayer]--;
        -: 1427:    }
        -: 1428:  else 	
        -: 1429:    {
        -: 1430:      //replace discarded card with last card in hand
       35: 1431:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1432:      //set last card to -1
       35: 1433:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1434:      //reduce number of cards in hand
       35: 1435:      state->handCount[currentPlayer]--;
        -: 1436:    }
        -: 1437:	
       45: 1438:  return 0;
        -: 1439:}
        -: 1440:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1441:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1442:{
        -: 1443:  //Note: supplyPos is enum of choosen card
        -: 1444:	
        -: 1445:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1446:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1447:    {
    #####: 1448:      return -1;
        -: 1449:    }
        -: 1450:	
        -: 1451:  //added card for [whoseTurn] current player:
        -: 1452:  // toFlag = 0 : add to discard
        -: 1453:  // toFlag = 1 : add to deck
        -: 1454:  // toFlag = 2 : add to hand
        -: 1455:
    #####: 1456:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1457:    {
    #####: 1458:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1459:      state->deckCount[player]++;
        -: 1460:    }
    #####: 1461:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1462:    {
    #####: 1463:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1464:      state->handCount[player]++;
        -: 1465:    }
        -: 1466:  else
        -: 1467:    {
    #####: 1468:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1469:      state->discardCount[player]++;
        -: 1470:    }
        -: 1471:	
        -: 1472:  //decrease number in supply pile
    #####: 1473:  state->supplyCount[supplyPos]--;
        -: 1474:	 
    #####: 1475:  return 0;
        -: 1476:}
        -: 1477:
function updateCoins called 25 returned 100% blocks executed 82%
       25: 1478:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1479:{
        -: 1480:  int i;
        -: 1481:	
        -: 1482:  //reset coin count
       25: 1483:  state->coins = 0;
        -: 1484:
        -: 1485:  //add coins for each Treasure card in player's hand
      150: 1486:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1487:    {
      125: 1488:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1489:	{
      100: 1490:	  state->coins += 1;
        -: 1491:	}
       25: 1492:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1493:	{
    #####: 1494:	  state->coins += 2;
        -: 1495:	}
       25: 1496:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1497:	{
    #####: 1498:	  state->coins += 3;
        -: 1499:	}	
        -: 1500:    }	
        -: 1501:
        -: 1502:  //add bonus
       25: 1503:  state->coins += bonus;
        -: 1504:
       25: 1505:  return 0;
        -: 1506:}
        -: 1507:
        -: 1508:
        -: 1509://end of dominion.c
        -: 1510:

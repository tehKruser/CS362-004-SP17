Result for running unit tests:
unittest1.c:
----------------- unittest1 Testing: buyCard() ----------------
Test player 0 with -1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 7 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with -1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with -1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 7 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with -1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 2 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 7 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 7 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 7 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 8 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 7 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 8 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 7 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 8 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 7 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 8 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 3 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 7 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 7 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 8 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 0 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 0 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 7 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 7 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 8 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 1 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 1 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 7 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 8 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 7 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 8 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 7 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 8 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 7 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 8 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 2 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 2 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 7 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 8 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 7 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 8 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with -1 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 0 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 6 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 0 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 0, expected = 0
G.phase = 0, expected = 0
Test player 3 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 0 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 1, expected = 1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 1 for 2 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 2 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 7 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 8 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 0 card(s) left.
G.coins = 8, expected = 8
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 7 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 7, expected = 7
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 8 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 3 for 8 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 0 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with -1 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = -1, expected = -1
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 0 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 4 for 0 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 5 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 6 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 0 card(s) left.
G.coins = 6, expected = 6
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 6 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 7 for 6 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 8 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 9 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 10 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 0 card(s) left.
G.coins = 5, expected = 5
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 5 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 11 for 5 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 12 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 13 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 14 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 0 card(s) left.
G.coins = 4, expected = 4
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 4 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 15 for 4 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1
Test player 3 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 0 card(s) left.
G.coins = 3, expected = 3
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 2 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 2, expected = 2
G.numBuys = 1, expected = 1
G.phase = 0, expected = 0
Test player 3 with 3 coin(s) and 1 buy(s) in a 4 player game, attempt to buy card 16 for 3 coins when there is 1 card(s) left.
G.coins = 0, expected = 0
G.numBuys = 0, expected = 0
G.phase = 1, expected = 1

UNIT TEST unittest1 COMPLETED: All tests passed!

File 'dominion.c'
Lines executed:23.79% of 580
Branches executed:25.06% of 431
Taken at least once:19.72% of 431
Calls executed:11.11% of 108
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 59160 returned 100% blocks executed 83%
    59160:    8:int compare(const void* a, const void* b) {
    59160:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    59160:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    15776:   12:    return -1;
    43384:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1224 returned 100% blocks executed 95%
     1224:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     1224:   44:  SelectStream(1);
call    0 returned 100%
     1224:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
     1224:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1224:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    13464:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   134640:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   122400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1224:   73:  if (numPlayers == 2)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:   74:    {
      272:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      952:   77:  else if (numPlayers == 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   78:    {
      408:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      544:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1224:   87:  if (numPlayers == 2)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:   88:    {
      272:   89:      state->supplyCount[estate] = 8;
      272:   90:      state->supplyCount[duchy] = 8;
      272:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      952:   95:      state->supplyCount[estate] = 12;
      952:   96:      state->supplyCount[duchy] = 12;
      952:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1224:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1224:  102:  state->supplyCount[silver] = 40;
     1224:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    25704:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   201960:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   189720:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    12240:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     4896:  115:		  if (numPlayers == 2){
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
      544:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
     1904:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     9792:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    12240:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   177480:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     5168:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  139:    {
     3944:  140:      state->deckCount[i] = 0;
    15776:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    11832:  143:	  state->deck[i][j] = estate;
    11832:  144:	  state->deckCount[i]++;
        -:  145:	}
    31552:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    27608:  148:	  state->deck[i][j] = copper;
    27608:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     5168:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  155:    {
     3944:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     5168:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     3944:  166:      state->handCount[i] = 0;
     3944:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    34272:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    33048:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1224:  182:  state->outpostPlayed = 0;
     1224:  183:  state->phase = 0;
     1224:  184:  state->numActions = 1;
     1224:  185:  state->numBuys = 1;
     1224:  186:  state->playedCardCount = 0;
     1224:  187:  state->whoseTurn = 0;
     1224:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     7344:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     6120:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1224:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1224:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3944 returned 100% blocks executed 94%
     3944:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3944:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3944:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
     3944:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    47328:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    39440:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    39440:  216:    newDeck[newDeckPos] = state->deck[player][card];
    39440:  217:    newDeckPos++;
   137496:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    98056:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    39440:  221:    state->deckCount[player]--;
        -:  222:  }
    43384:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    39440:  224:    state->deck[player][i] = newDeck[i];
    39440:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3944:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 1224 returned 100% blocks executed 100%
     1224:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     1224:  280:  who = state->whoseTurn;
        -:  281:
     1224:  282:  if (state->numBuys < 1){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      612:  285:    return -1;
      612:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      306:  289:    return -1;
      306:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      153:  293:    return -1;
        -:  294:  } else {
      153:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      153:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:
      153:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
      153:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
      153:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 765 returned 100% blocks executed 100%
      765:  320:int supplyCount(int card, struct gameState *state) {
      765:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 6120 returned 100% blocks executed 38%
     6120:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     6120:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     6120:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     6120:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     6120:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     6120:  576:    state->deckCount[player]--;
     6120:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     6120:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 765 returned 100% blocks executed 63%
      765:  583:int getCost(int cardNumber)
        -:  584:{
      765:  585:  switch( cardNumber )
branch  0 taken 6%
branch  1 taken 6%
branch  2 taken 6%
branch  3 taken 6%
branch  4 taken 6%
branch  5 taken 6%
branch  6 taken 6%
branch  7 taken 6%
branch  8 taken 6%
branch  9 taken 6%
branch 10 taken 6%
branch 11 taken 6%
branch 12 taken 6%
branch 13 taken 6%
branch 14 taken 6%
branch 15 taken 6%
branch 16 taken 6%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
       45:  588:      return 0;
        -:  589:    case estate:
       45:  590:      return 2;
        -:  591:    case duchy:
       45:  592:      return 5;
        -:  593:    case province:
       45:  594:      return 8;
        -:  595:    case copper:
       45:  596:      return 0;
        -:  597:    case silver:
       45:  598:      return 3;
        -:  599:    case gold:
       45:  600:      return 6;
        -:  601:    case adventurer:
       45:  602:      return 6;
        -:  603:    case council_room:
       45:  604:      return 5;
        -:  605:    case feast:
       45:  606:      return 4;
        -:  607:    case gardens:
       45:  608:      return 4;
        -:  609:    case mine:
       45:  610:      return 5;
        -:  611:    case remodel:
       45:  612:      return 4;
        -:  613:    case smithy:
       45:  614:      return 4;
        -:  615:    case village:
       45:  616:      return 3;
        -:  617:    case baron:
       45:  618:      return 4;
        -:  619:    case great_hall:
       45:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  // function prototypes for cards
        -:  649:  int adventurerCard(struct gameState *state);
        -:  650:  int smithyCard(struct gameState *state, int handPos);
        -:  651:  int mineCard(struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:  int council_roomCard(struct gameState *state, int handPos);
        -:  653:  int feastCard(struct gameState *state, int choice1, int handPos);
        -:  654:
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int index;
    #####:  659:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
    #####:  662:  int tributeRevealedCards[2] = {-1, -1};
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:    case council_room:
    #####:  675:        return council_roomCard(state, handPos);
call    0 never executed
        -:  676:
        -:  677:    case feast:
    #####:  678:        return feastCard(state, choice1, handPos);
call    0 never executed
        -:  679:
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:
        -:  683:    case mine:
    #####:  684:      return mineCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  685:
        -:  686:    case remodel:
    #####:  687:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  688:
    #####:  689:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  695:
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:      //discard trashed card
    #####:  700:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  701:	{
    #####:  702:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  703:	    {
    #####:  704:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:
    #####:  710:      return 0;
        -:  711:
        -:  712:    case smithy:
    #####:  713:        return smithyCard(state, handPos);
call    0 never executed
        -:  714:
        -:  715:    case village:
        -:  716:      //+1 Card
    #####:  717:      drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:      //+2 Actions
    #####:  720:      state->numActions = state->numActions + 2;
        -:  721:
        -:  722:      //discard played card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:      return 0;
        -:  725:
        -:  726:    case baron:
    #####:  727:      state->numBuys++;//Increase buys by 1!
    #####:  728:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  729:	int p = 0;//Iterator for hand!
    #####:  730:	int card_not_discarded = 1;//Flag for discard set!
    #####:  731:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  732:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  733:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  734:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  735:	    state->discardCount[currentPlayer]++;
    #####:  736:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  737:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:	    }
    #####:  739:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  740:	    state->handCount[currentPlayer]--;
    #####:  741:	    card_not_discarded = 0;//Exit the loop
        -:  742:	  }
    #####:  743:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  744:	    if(DEBUG) {
        -:  745:	      printf("No estate cards in your hand, invalid choice\n");
        -:  746:	      printf("Must gain an estate if there are any\n");
        -:  747:	    }
    #####:  748:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  750:	      state->supplyCount[estate]--;//Decrement estates
    #####:  751:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:		isGameOver(state);
call    0 never executed
        -:  753:	      }
        -:  754:	    }
    #####:  755:	    card_not_discarded = 0;//Exit the loop
        -:  756:	  }
        -:  757:
        -:  758:	  else{
    #####:  759:	    p++;//Next card
        -:  760:	  }
        -:  761:	}
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  767:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  768:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	    isGameOver(state);
call    0 never executed
        -:  770:	  }
        -:  771:	}
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:    case great_hall:
        -:  778:      //+1 Card
    #####:  779:      drawCard(currentPlayer, state);
call    0 never executed
        -:  780:
        -:  781:      //+1 Actions
    #####:  782:      state->numActions++;
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  786:      return 0;
        -:  787:
        -:  788:    case minion:
        -:  789:      //+1 action
    #####:  790:      state->numActions++;
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
    #####:  795:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  state->coins = state->coins + 2;
        -:  798:	}
        -:  799:
    #####:  800:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:	{
        -:  802:	  //discard hand
    #####:  803:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:	    {
    #####:  805:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  806:	    }
        -:  807:
        -:  808:	  //draw 4
    #####:  809:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	    }
        -:  813:
        -:  814:	  //other players discard hand and redraw if hand size > 4
    #####:  815:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	    {
    #####:  817:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:		{
    #####:  819:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:		    {
        -:  821:		      //discard hand
    #####:  822:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  823:			{
    #####:  824:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  825:			}
        -:  826:
        -:  827:		      //draw 4
    #####:  828:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  829:			{
    #####:  830:			  drawCard(i, state);
call    0 never executed
        -:  831:			}
        -:  832:		    }
        -:  833:		}
        -:  834:	    }
        -:  835:
        -:  836:	}
    #####:  837:      return 0;
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  864:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:	  state->deckCount[nextPlayer]--;
        -:  867:	}
    #####:  868:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  870:	  state->discardCount[nextPlayer]--;
        -:  871:	}
        -:  872:	else{
        -:  873:	  //No Card to Reveal
        -:  874:	  if (DEBUG){
        -:  875:	    printf("No cards to reveal\n");
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	}
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }
        -:  898:
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case ambassador:
    #####:  922:      j = 0;		//used to check if player has enough cards to discard
        -:  923:
    #####:  924:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  937:	    {
    #####:  938:	      j++;
        -:  939:	    }
        -:  940:	}
    #####:  941:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      if (DEBUG)
        -:  947:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  948:
        -:  949:      //increase supply count for choosen card by amount being discarded
    #####:  950:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  951:
        -:  952:      //each other player gains a copy of revealed card
    #####:  953:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:
        -:  964:      //trash copies of cards returned to supply
    #####:  965:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  972:		  break;
        -:  973:		}
        -:  974:	    }
        -:  975:	}
        -:  976:
    #####:  977:      return 0;
        -:  978:
        -:  979:    case cutpurse:
        -:  980:
    #####:  981:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  989:		    {
    #####:  990:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  991:		      break;
        -:  992:		    }
    #####:  993:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  994:		    {
    #####:  995:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
        -:  997:			  if (DEBUG)
        -:  998:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  999:			}
    #####: 1000:		      break;
        -: 1001:		    }
        -: 1002:		}
        -: 1003:
        -: 1004:	    }
        -: 1005:
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:
        -: 1014:    case embargo:
        -: 1015:      //+2 Coins
    #####: 1016:      state->coins = state->coins + 2;
        -: 1017:
        -: 1018:      //see if selected pile is in play
    #####: 1019:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;
        -: 1022:	}
        -: 1023:
        -: 1024:      //add embargo token to selected supply pile
    #####: 1025:      state->embargoTokens[choice1]++;
        -: 1026:
        -: 1027:      //trash card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:
        -: 1031:    case outpost:
        -: 1032:      //set outpost flag
    #####: 1033:      state->outpostPlayed++;
        -: 1034:
        -: 1035:      //discard card
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:
        -: 1039:    case salvager:
        -: 1040:      //+1 buy
    #####: 1041:      state->numBuys++;
        -: 1042:
    #####: 1043:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
        -: 1045:	  //gain coins equal to trashed card
    #####: 1046:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1047:	  //trash card
    #####: 1048:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:    case sea_hag:
    #####: 1056:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1059:	  state->discardCount[i]++;
    #####: 1060:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1061:	}
        -: 1062:      }
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case treasure_map:
        -: 1066:      //search hand for another treasure_map
    #####: 1067:      index = -1;
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	    {
    #####: 1072:	      index = i;
    #####: 1073:	      break;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //trash both treasure cards
    #####: 1079:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1081:
        -: 1082:	  //gain 4 Gold cards
    #####: 1083:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1086:	    }
        -: 1087:
        -: 1088:	  //return success
    #####: 1089:	  return 1;
        -: 1090:	}
        -: 1091:
        -: 1092:      //no second treasure_map found in hand
    #####: 1093:      return -1;
        -: 1094:    }
        -: 1095:
    #####: 1096:  return -1;
        -: 1097:}
        -: 1098:
        -: 1099:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1100:int adventurerCard(struct gameState *state)
        -: 1101:{
    #####: 1102:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1103:
        -: 1104:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1105:  int drawntreasure=0;
        -: 1106:  int cardDrawn;
    #####: 1107:  int z = 0;// this is the counter for the temp hand
        -: 1108:
    #####: 1109:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1110:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1111:          shuffle(currentPlayer, state);
call    0 never executed
        -: 1112:        }
    #####: 1113:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1114:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1115:        //
        -: 1116:        /** Bug: replaced 'cardDrawn == copper' with '(cardDrawn = copper)' **/
        -: 1117:        //if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1118:        if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1119:          drawntreasure++;
        -: 1120:        else{
        -: 1121:          temphand[z]=cardDrawn;
        -: 1122:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1123:          z++;
        -: 1124:        }
        -: 1125:	}
        -: 1126:
    #####: 1127:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1128:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1129:        z=z-1;
        -: 1130:    }
    #####: 1131:    return 0;
        -: 1132:}
        -: 1133:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1134:int smithyCard(struct gameState *state, int handPos)
        -: 1135:{
        -: 1136:    int i;
    #####: 1137:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1138:      //+3 Cards
        -: 1139:      //for (i = 0; i < 3; i++)
        -: 1140:      /** Bug: replaced 'i < 3' with 'i <= 3' **/
    #####: 1141:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1144:	}
        -: 1145:      //discard card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1147:      return 0;
        -: 1148:}
        -: 1149:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1150:int mineCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1151:{
        -: 1152:      int i;
        -: 1153:      int j;
    #####: 1154:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1155:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1156:
    #####: 1157:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
        -: 1162:    //if (choice2 > treasure_map || choice2 < curse)
        -: 1163:    /** Bug: replaced '||' with '&&' **/
    #####: 1164:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1175:
        -: 1176:      //discard card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1178:
        -: 1179:      //discard trashed card
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:	      break;
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
    #####: 1189:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1190:
    #####: 1191:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:
    #####: 1201:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
    #####: 1206:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1207:
        -: 1208:      //discard card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1210:
        -: 1211:      //discard trashed card
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:	      break;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      return 0;
        -: 1221:}
        -: 1222:
        -: 1223:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1224:int council_roomCard(struct gameState *state, int handPos) {
        -: 1225:
        -: 1226:    int i;
    #####: 1227:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1228:      //+4 Cards
    #####: 1229:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //+1 Buy
    #####: 1235:      state->numBuys++;
        -: 1236:
        -: 1237:      //Each other player draws a card
        -: 1238:      //for (i = 0; i < state->numPlayers; i++)
        -: 1239:      /** Bug: replace '<' with '<=' **/
    #####: 1240:      for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      drawCard(i, state);
call    0 never executed
        -: 1245:	    }
        -: 1246:	}
        -: 1247:
        -: 1248:      //put played card in played card pile
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1250:
        -: 1251:      //+4 Cards
    #####: 1252:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:	}
        -: 1256:
        -: 1257:      //+1 Buy
    #####: 1258:      state->numBuys++;
        -: 1259:
        -: 1260:      //Each other player draws a card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      drawCard(i, state);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //put played card in played card pile
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1271:
    #####: 1272:      return 0;
        -: 1273:}
        -: 1274:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1275:int feastCard(struct gameState *state, int choice1, int handPos)
        -: 1276:{
        -: 1277:    int i;
        -: 1278:    int x;
    #####: 1279:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1280:    int temphand[MAX_HAND];// moved above the if statement
        -: 1281:
        -: 1282:      //gain card with cost up to 5
        -: 1283:      //Backup hand
    #####: 1284:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1286:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1287:      }
        -: 1288:      //Backup hand
        -: 1289:
        -: 1290:      //Update Coins for Buy
    #####: 1291:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1292:      x = 1;//Condition to loop on
    #####: 1293:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1294:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1295:          if (DEBUG)
        -: 1296:            printf("None of that card left, sorry!\n");
        -: 1297:
        -: 1298:          if (DEBUG){
        -: 1299:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1300:          }
        -: 1301:        }
    #####: 1302:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:          printf("That card is too expensive!\n");
call    0 never executed
        -: 1304:
        -: 1305:          if (DEBUG){
        -: 1306:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1307:          }
        -: 1308:        }
        -: 1309:        else{
        -: 1310:
        -: 1311:          if (DEBUG){
        -: 1312:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1313:          }
        -: 1314:
    #####: 1315:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1316:          x = 0;//No more buying cards
        -: 1317:
        -: 1318:          if (DEBUG){
        -: 1319:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1320:          }
        -: 1321:        }
        -: 1322:    }
        -: 1323:
        -: 1324:      //Reset Hand
    #####: 1325:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1327:        temphand[i] = -1;
        -: 1328:      }
        -: 1329:      //Reset Hand
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:}
        -: 1333:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:
        -: 1337:  //if card is not trashed, added to Played pile
    #####: 1338:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
        -: 1340:      //add card to played pile
    #####: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:
        -: 1345:  //set played card to -1
    #####: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:
        -: 1348:  //remove card from player's hand
    #####: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
    #####: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
    #####: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
    #####: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
    #####: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
    #####: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:
    #####: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 153 returned 100% blocks executed 70%
      153: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
      153: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1378:    {
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
      153: 1387:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1388:    {
    #####: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1390:      state->deckCount[player]++;
        -: 1391:    }
      153: 1392:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1393:    {
    #####: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
      153: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      153: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:
        -: 1403:  //decrease number in supply pile
      153: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:
      153: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 1224 returned 100% blocks executed 82%
     1224: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:
        -: 1413:  //reset coin count
     1224: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
     7344: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
     6120: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1420:	{
     4896: 1421:	  state->coins += 1;
        -: 1422:	}
     1224: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
     1224: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}
        -: 1431:    }
        -: 1432:
        -: 1433:  //add bonus
     1224: 1434:  state->coins += bonus;
        -: 1435:
     1224: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end of dominion.c
unittest2.c:
----------------- unittest2 Testing: isGameOver() ----------------
Test when game starts.
isGameOver return value: 0, expected: 0
Test when no province cards (card 3) in supply.
isGameOver return value: 1, expected: 1
Test when 1 supply cards are empty. Setting card 1 to 0.
isGameOver return value: 0, expected: 0
Test when 2 supply cards are empty. Setting card 2 to 0.
isGameOver return value: 0, expected: 0
Test when 3 supply cards are empty. Setting card 6 to 0.
isGameOver return value: 1, expected: 1

UNIT TEST unittest2 COMPLETED: All tests passed!

File 'dominion.c'
Lines executed:17.07% of 580
Branches executed:17.17% of 431
Taken at least once:14.39% of 431
Calls executed:6.48% of 108
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 100%
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  // function prototypes for cards
        -:  649:  int adventurerCard(struct gameState *state);
        -:  650:  int smithyCard(struct gameState *state, int handPos);
        -:  651:  int mineCard(struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:  int council_roomCard(struct gameState *state, int handPos);
        -:  653:  int feastCard(struct gameState *state, int choice1, int handPos);
        -:  654:
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int index;
    #####:  659:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
    #####:  662:  int tributeRevealedCards[2] = {-1, -1};
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:    case council_room:
    #####:  675:        return council_roomCard(state, handPos);
call    0 never executed
        -:  676:
        -:  677:    case feast:
    #####:  678:        return feastCard(state, choice1, handPos);
call    0 never executed
        -:  679:
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:
        -:  683:    case mine:
    #####:  684:      return mineCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  685:
        -:  686:    case remodel:
    #####:  687:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  688:
    #####:  689:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  695:
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:      //discard trashed card
    #####:  700:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  701:	{
    #####:  702:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  703:	    {
    #####:  704:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:
    #####:  710:      return 0;
        -:  711:
        -:  712:    case smithy:
    #####:  713:        return smithyCard(state, handPos);
call    0 never executed
        -:  714:
        -:  715:    case village:
        -:  716:      //+1 Card
    #####:  717:      drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:      //+2 Actions
    #####:  720:      state->numActions = state->numActions + 2;
        -:  721:
        -:  722:      //discard played card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:      return 0;
        -:  725:
        -:  726:    case baron:
    #####:  727:      state->numBuys++;//Increase buys by 1!
    #####:  728:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  729:	int p = 0;//Iterator for hand!
    #####:  730:	int card_not_discarded = 1;//Flag for discard set!
    #####:  731:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  732:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  733:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  734:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  735:	    state->discardCount[currentPlayer]++;
    #####:  736:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  737:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:	    }
    #####:  739:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  740:	    state->handCount[currentPlayer]--;
    #####:  741:	    card_not_discarded = 0;//Exit the loop
        -:  742:	  }
    #####:  743:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  744:	    if(DEBUG) {
        -:  745:	      printf("No estate cards in your hand, invalid choice\n");
        -:  746:	      printf("Must gain an estate if there are any\n");
        -:  747:	    }
    #####:  748:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  750:	      state->supplyCount[estate]--;//Decrement estates
    #####:  751:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:		isGameOver(state);
call    0 never executed
        -:  753:	      }
        -:  754:	    }
    #####:  755:	    card_not_discarded = 0;//Exit the loop
        -:  756:	  }
        -:  757:
        -:  758:	  else{
    #####:  759:	    p++;//Next card
        -:  760:	  }
        -:  761:	}
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  767:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  768:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	    isGameOver(state);
call    0 never executed
        -:  770:	  }
        -:  771:	}
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:    case great_hall:
        -:  778:      //+1 Card
    #####:  779:      drawCard(currentPlayer, state);
call    0 never executed
        -:  780:
        -:  781:      //+1 Actions
    #####:  782:      state->numActions++;
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  786:      return 0;
        -:  787:
        -:  788:    case minion:
        -:  789:      //+1 action
    #####:  790:      state->numActions++;
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
    #####:  795:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  state->coins = state->coins + 2;
        -:  798:	}
        -:  799:
    #####:  800:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:	{
        -:  802:	  //discard hand
    #####:  803:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:	    {
    #####:  805:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  806:	    }
        -:  807:
        -:  808:	  //draw 4
    #####:  809:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	    }
        -:  813:
        -:  814:	  //other players discard hand and redraw if hand size > 4
    #####:  815:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	    {
    #####:  817:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:		{
    #####:  819:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:		    {
        -:  821:		      //discard hand
    #####:  822:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  823:			{
    #####:  824:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  825:			}
        -:  826:
        -:  827:		      //draw 4
    #####:  828:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  829:			{
    #####:  830:			  drawCard(i, state);
call    0 never executed
        -:  831:			}
        -:  832:		    }
        -:  833:		}
        -:  834:	    }
        -:  835:
        -:  836:	}
    #####:  837:      return 0;
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  864:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:	  state->deckCount[nextPlayer]--;
        -:  867:	}
    #####:  868:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  870:	  state->discardCount[nextPlayer]--;
        -:  871:	}
        -:  872:	else{
        -:  873:	  //No Card to Reveal
        -:  874:	  if (DEBUG){
        -:  875:	    printf("No cards to reveal\n");
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	}
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }
        -:  898:
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case ambassador:
    #####:  922:      j = 0;		//used to check if player has enough cards to discard
        -:  923:
    #####:  924:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  937:	    {
    #####:  938:	      j++;
        -:  939:	    }
        -:  940:	}
    #####:  941:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      if (DEBUG)
        -:  947:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  948:
        -:  949:      //increase supply count for choosen card by amount being discarded
    #####:  950:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  951:
        -:  952:      //each other player gains a copy of revealed card
    #####:  953:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:
        -:  964:      //trash copies of cards returned to supply
    #####:  965:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  972:		  break;
        -:  973:		}
        -:  974:	    }
        -:  975:	}
        -:  976:
    #####:  977:      return 0;
        -:  978:
        -:  979:    case cutpurse:
        -:  980:
    #####:  981:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  989:		    {
    #####:  990:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  991:		      break;
        -:  992:		    }
    #####:  993:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  994:		    {
    #####:  995:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
        -:  997:			  if (DEBUG)
        -:  998:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  999:			}
    #####: 1000:		      break;
        -: 1001:		    }
        -: 1002:		}
        -: 1003:
        -: 1004:	    }
        -: 1005:
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:
        -: 1014:    case embargo:
        -: 1015:      //+2 Coins
    #####: 1016:      state->coins = state->coins + 2;
        -: 1017:
        -: 1018:      //see if selected pile is in play
    #####: 1019:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;
        -: 1022:	}
        -: 1023:
        -: 1024:      //add embargo token to selected supply pile
    #####: 1025:      state->embargoTokens[choice1]++;
        -: 1026:
        -: 1027:      //trash card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:
        -: 1031:    case outpost:
        -: 1032:      //set outpost flag
    #####: 1033:      state->outpostPlayed++;
        -: 1034:
        -: 1035:      //discard card
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:
        -: 1039:    case salvager:
        -: 1040:      //+1 buy
    #####: 1041:      state->numBuys++;
        -: 1042:
    #####: 1043:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
        -: 1045:	  //gain coins equal to trashed card
    #####: 1046:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1047:	  //trash card
    #####: 1048:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:    case sea_hag:
    #####: 1056:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1059:	  state->discardCount[i]++;
    #####: 1060:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1061:	}
        -: 1062:      }
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case treasure_map:
        -: 1066:      //search hand for another treasure_map
    #####: 1067:      index = -1;
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	    {
    #####: 1072:	      index = i;
    #####: 1073:	      break;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //trash both treasure cards
    #####: 1079:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1081:
        -: 1082:	  //gain 4 Gold cards
    #####: 1083:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1086:	    }
        -: 1087:
        -: 1088:	  //return success
    #####: 1089:	  return 1;
        -: 1090:	}
        -: 1091:
        -: 1092:      //no second treasure_map found in hand
    #####: 1093:      return -1;
        -: 1094:    }
        -: 1095:
    #####: 1096:  return -1;
        -: 1097:}
        -: 1098:
        -: 1099:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1100:int adventurerCard(struct gameState *state)
        -: 1101:{
    #####: 1102:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1103:
        -: 1104:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1105:  int drawntreasure=0;
        -: 1106:  int cardDrawn;
    #####: 1107:  int z = 0;// this is the counter for the temp hand
        -: 1108:
    #####: 1109:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1110:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1111:          shuffle(currentPlayer, state);
call    0 never executed
        -: 1112:        }
    #####: 1113:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1114:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1115:        //
        -: 1116:        /** Bug: replaced 'cardDrawn == copper' with '(cardDrawn = copper)' **/
        -: 1117:        //if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1118:        if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1119:          drawntreasure++;
        -: 1120:        else{
        -: 1121:          temphand[z]=cardDrawn;
        -: 1122:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1123:          z++;
        -: 1124:        }
        -: 1125:	}
        -: 1126:
    #####: 1127:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1128:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1129:        z=z-1;
        -: 1130:    }
    #####: 1131:    return 0;
        -: 1132:}
        -: 1133:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1134:int smithyCard(struct gameState *state, int handPos)
        -: 1135:{
        -: 1136:    int i;
    #####: 1137:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1138:      //+3 Cards
        -: 1139:      //for (i = 0; i < 3; i++)
        -: 1140:      /** Bug: replaced 'i < 3' with 'i <= 3' **/
    #####: 1141:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1144:	}
        -: 1145:      //discard card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1147:      return 0;
        -: 1148:}
        -: 1149:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1150:int mineCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1151:{
        -: 1152:      int i;
        -: 1153:      int j;
    #####: 1154:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1155:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1156:
    #####: 1157:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
        -: 1162:    //if (choice2 > treasure_map || choice2 < curse)
        -: 1163:    /** Bug: replaced '||' with '&&' **/
    #####: 1164:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1175:
        -: 1176:      //discard card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1178:
        -: 1179:      //discard trashed card
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:	      break;
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
    #####: 1189:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1190:
    #####: 1191:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:
    #####: 1201:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
    #####: 1206:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1207:
        -: 1208:      //discard card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1210:
        -: 1211:      //discard trashed card
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:	      break;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      return 0;
        -: 1221:}
        -: 1222:
        -: 1223:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1224:int council_roomCard(struct gameState *state, int handPos) {
        -: 1225:
        -: 1226:    int i;
    #####: 1227:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1228:      //+4 Cards
    #####: 1229:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //+1 Buy
    #####: 1235:      state->numBuys++;
        -: 1236:
        -: 1237:      //Each other player draws a card
        -: 1238:      //for (i = 0; i < state->numPlayers; i++)
        -: 1239:      /** Bug: replace '<' with '<=' **/
    #####: 1240:      for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      drawCard(i, state);
call    0 never executed
        -: 1245:	    }
        -: 1246:	}
        -: 1247:
        -: 1248:      //put played card in played card pile
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1250:
        -: 1251:      //+4 Cards
    #####: 1252:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:	}
        -: 1256:
        -: 1257:      //+1 Buy
    #####: 1258:      state->numBuys++;
        -: 1259:
        -: 1260:      //Each other player draws a card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      drawCard(i, state);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //put played card in played card pile
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1271:
    #####: 1272:      return 0;
        -: 1273:}
        -: 1274:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1275:int feastCard(struct gameState *state, int choice1, int handPos)
        -: 1276:{
        -: 1277:    int i;
        -: 1278:    int x;
    #####: 1279:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1280:    int temphand[MAX_HAND];// moved above the if statement
        -: 1281:
        -: 1282:      //gain card with cost up to 5
        -: 1283:      //Backup hand
    #####: 1284:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1286:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1287:      }
        -: 1288:      //Backup hand
        -: 1289:
        -: 1290:      //Update Coins for Buy
    #####: 1291:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1292:      x = 1;//Condition to loop on
    #####: 1293:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1294:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1295:          if (DEBUG)
        -: 1296:            printf("None of that card left, sorry!\n");
        -: 1297:
        -: 1298:          if (DEBUG){
        -: 1299:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1300:          }
        -: 1301:        }
    #####: 1302:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:          printf("That card is too expensive!\n");
call    0 never executed
        -: 1304:
        -: 1305:          if (DEBUG){
        -: 1306:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1307:          }
        -: 1308:        }
        -: 1309:        else{
        -: 1310:
        -: 1311:          if (DEBUG){
        -: 1312:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1313:          }
        -: 1314:
    #####: 1315:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1316:          x = 0;//No more buying cards
        -: 1317:
        -: 1318:          if (DEBUG){
        -: 1319:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1320:          }
        -: 1321:        }
        -: 1322:    }
        -: 1323:
        -: 1324:      //Reset Hand
    #####: 1325:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1327:        temphand[i] = -1;
        -: 1328:      }
        -: 1329:      //Reset Hand
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:}
        -: 1333:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:
        -: 1337:  //if card is not trashed, added to Played pile
    #####: 1338:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
        -: 1340:      //add card to played pile
    #####: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:
        -: 1345:  //set played card to -1
    #####: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:
        -: 1348:  //remove card from player's hand
    #####: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
    #####: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
    #####: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
    #####: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
    #####: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
    #####: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:
    #####: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1378:    {
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
    #####: 1387:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1388:    {
    #####: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1390:      state->deckCount[player]++;
        -: 1391:    }
    #####: 1392:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1393:    {
    #####: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
    #####: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:
        -: 1403:  //decrease number in supply pile
    #####: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:
    #####: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:
        -: 1413:  //reset coin count
        1: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
        6: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
        5: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1420:	{
        4: 1421:	  state->coins += 1;
        -: 1422:	}
        1: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
        1: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}
        -: 1431:    }
        -: 1432:
        -: 1433:  //add bonus
        1: 1434:  state->coins += bonus;
        -: 1435:
        1: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end of dominion.c
unittest3.c:
----------------- unittest3 Testing: endTurn() ----------------
***Switching to a 2 player game.
***Ending turn for player 0.
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
G.discardCount[0]: 5, expected: 5
G.discard[0][0]: 7, expected: 7
G.discard[0][1]: 8, expected: 8
G.discard[0][2]: 9, expected: 9
G.discard[0][3]: 10, expected: 10
G.discard[0][4]: 11, expected: 11
G.whoseTurn: 1, expected: 1
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5
***Ending turn for player 1.
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
G.discardCount[1]: 5, expected: 5
G.discard[1][0]: 7, expected: 7
G.discard[1][1]: 8, expected: 8
G.discard[1][2]: 9, expected: 9
G.discard[1][3]: 10, expected: 10
G.discard[1][4]: 11, expected: 11
G.whoseTurn: 0, expected: 0
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5
***Switching to a 3 player game.
***Ending turn for player 0.
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
G.discardCount[0]: 5, expected: 5
G.discard[0][0]: 7, expected: 7
G.discard[0][1]: 8, expected: 8
G.discard[0][2]: 9, expected: 9
G.discard[0][3]: 10, expected: 10
G.discard[0][4]: 11, expected: 11
G.whoseTurn: 1, expected: 1
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5
***Ending turn for player 1.
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
G.discardCount[1]: 5, expected: 5
G.discard[1][0]: 7, expected: 7
G.discard[1][1]: 8, expected: 8
G.discard[1][2]: 9, expected: 9
G.discard[1][3]: 10, expected: 10
G.discard[1][4]: 11, expected: 11
G.whoseTurn: 2, expected: 2
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5
***Ending turn for player 2.
G.handCount[2]: 0, expected: 0
G.hand[2][0]: -1, expected: -1
G.hand[2][1]: -1, expected: -1
G.hand[2][2]: -1, expected: -1
G.hand[2][3]: -1, expected: -1
G.hand[2][4]: -1, expected: -1
G.discardCount[2]: 5, expected: 5
G.discard[2][0]: 7, expected: 7
G.discard[2][1]: 8, expected: 8
G.discard[2][2]: 9, expected: 9
G.discard[2][3]: 10, expected: 10
G.discard[2][4]: 11, expected: 11
G.whoseTurn: 0, expected: 0
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5
***Switching to a 4 player game.
***Ending turn for player 0.
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
G.discardCount[0]: 5, expected: 5
G.discard[0][0]: 7, expected: 7
G.discard[0][1]: 8, expected: 8
G.discard[0][2]: 9, expected: 9
G.discard[0][3]: 10, expected: 10
G.discard[0][4]: 11, expected: 11
G.whoseTurn: 1, expected: 1
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5
***Ending turn for player 1.
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
G.discardCount[1]: 5, expected: 5
G.discard[1][0]: 7, expected: 7
G.discard[1][1]: 8, expected: 8
G.discard[1][2]: 9, expected: 9
G.discard[1][3]: 10, expected: 10
G.discard[1][4]: 11, expected: 11
G.whoseTurn: 2, expected: 2
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5
***Ending turn for player 2.
G.handCount[2]: 0, expected: 0
G.hand[2][0]: -1, expected: -1
G.hand[2][1]: -1, expected: -1
G.hand[2][2]: -1, expected: -1
G.hand[2][3]: -1, expected: -1
G.hand[2][4]: -1, expected: -1
G.discardCount[2]: 5, expected: 5
G.discard[2][0]: 7, expected: 7
G.discard[2][1]: 8, expected: 8
G.discard[2][2]: 9, expected: 9
G.discard[2][3]: 10, expected: 10
G.discard[2][4]: 11, expected: 11
G.whoseTurn: 3, expected: 3
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5
***Ending turn for player 3.
G.handCount[3]: 0, expected: 0
G.hand[3][0]: -1, expected: -1
G.hand[3][1]: -1, expected: -1
G.hand[3][2]: -1, expected: -1
G.hand[3][3]: -1, expected: -1
G.hand[3][4]: -1, expected: -1
G.discardCount[3]: 5, expected: 5
G.discard[3][0]: 7, expected: 7
G.discard[3][1]: 8, expected: 8
G.discard[3][2]: 9, expected: 9
G.discard[3][3]: 10, expected: 10
G.discard[3][4]: 11, expected: 11
G.whoseTurn: 0, expected: 0
G.outpostPlayed: 0, expected: 0
G.phase: 0, expected: 0
G.numActions: 1, expected: 1
G.numBuys: 1, expected: 1
G.playedCardCount: 0, expected: 0
G.handCount[G.whoseTurn]: 5, expected: 5

UNIT TEST unittest3 COMPLETED: All tests passed!

File 'dominion.c'
Lines executed:20.34% of 580
Branches executed:17.17% of 431
Taken at least once:15.08% of 431
Calls executed:9.26% of 108
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void* a, const void* b) {
      135:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      135:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       36:   12:    return -1;
       99:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 95%
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
call    0 returned 100%
        3:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       12:  115:		  if (numPlayers == 2){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       24:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
        9:  140:      state->deckCount[i] = 0;
       36:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       27:  143:	  state->deck[i][j] = estate;
       27:  144:	  state->deckCount[i]++;
        -:  145:	}
       72:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       63:  148:	  state->deck[i][j] = copper;
       63:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
        9:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        9:  166:      state->handCount[i] = 0;
        9:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 9 returned 100% blocks executed 94%
        9:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        9:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        9:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        9:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      108:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       90:  216:    newDeck[newDeckPos] = state->deck[player][card];
       90:  217:    newDeckPos++;
      314:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      224:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       90:  221:    state->deckCount[player]--;
        -:  222:  }
       99:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  224:    state->deck[player][i] = newDeck[i];
       90:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        9:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 9 returned 100% blocks executed 100%
        9:  346:int whoseTurn(struct gameState *state) {
        9:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 9 returned 100% blocks executed 100%
        9:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        9:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:
        -:  355:  //Discard hand
       54:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       45:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        9:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        9:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        6:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        3:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        9:  370:  state->outpostPlayed = 0;
        9:  371:  state->phase = 0;
        9:  372:  state->numActions = 1;
        9:  373:  state->coins = 0;
        9:  374:  state->numBuys = 1;
        9:  375:  state->playedCardCount = 0;
        9:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       54:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        9:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        9:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 60 returned 100% blocks executed 38%
       60:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       60:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       60:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       60:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       60:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       60:  576:    state->deckCount[player]--;
       60:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       60:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  // function prototypes for cards
        -:  649:  int adventurerCard(struct gameState *state);
        -:  650:  int smithyCard(struct gameState *state, int handPos);
        -:  651:  int mineCard(struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:  int council_roomCard(struct gameState *state, int handPos);
        -:  653:  int feastCard(struct gameState *state, int choice1, int handPos);
        -:  654:
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int index;
    #####:  659:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
    #####:  662:  int tributeRevealedCards[2] = {-1, -1};
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:    case council_room:
    #####:  675:        return council_roomCard(state, handPos);
call    0 never executed
        -:  676:
        -:  677:    case feast:
    #####:  678:        return feastCard(state, choice1, handPos);
call    0 never executed
        -:  679:
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:
        -:  683:    case mine:
    #####:  684:      return mineCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  685:
        -:  686:    case remodel:
    #####:  687:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  688:
    #####:  689:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  695:
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:      //discard trashed card
    #####:  700:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  701:	{
    #####:  702:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  703:	    {
    #####:  704:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:
    #####:  710:      return 0;
        -:  711:
        -:  712:    case smithy:
    #####:  713:        return smithyCard(state, handPos);
call    0 never executed
        -:  714:
        -:  715:    case village:
        -:  716:      //+1 Card
    #####:  717:      drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:      //+2 Actions
    #####:  720:      state->numActions = state->numActions + 2;
        -:  721:
        -:  722:      //discard played card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:      return 0;
        -:  725:
        -:  726:    case baron:
    #####:  727:      state->numBuys++;//Increase buys by 1!
    #####:  728:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  729:	int p = 0;//Iterator for hand!
    #####:  730:	int card_not_discarded = 1;//Flag for discard set!
    #####:  731:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  732:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  733:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  734:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  735:	    state->discardCount[currentPlayer]++;
    #####:  736:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  737:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:	    }
    #####:  739:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  740:	    state->handCount[currentPlayer]--;
    #####:  741:	    card_not_discarded = 0;//Exit the loop
        -:  742:	  }
    #####:  743:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  744:	    if(DEBUG) {
        -:  745:	      printf("No estate cards in your hand, invalid choice\n");
        -:  746:	      printf("Must gain an estate if there are any\n");
        -:  747:	    }
    #####:  748:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  750:	      state->supplyCount[estate]--;//Decrement estates
    #####:  751:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:		isGameOver(state);
call    0 never executed
        -:  753:	      }
        -:  754:	    }
    #####:  755:	    card_not_discarded = 0;//Exit the loop
        -:  756:	  }
        -:  757:
        -:  758:	  else{
    #####:  759:	    p++;//Next card
        -:  760:	  }
        -:  761:	}
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  767:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  768:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	    isGameOver(state);
call    0 never executed
        -:  770:	  }
        -:  771:	}
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:    case great_hall:
        -:  778:      //+1 Card
    #####:  779:      drawCard(currentPlayer, state);
call    0 never executed
        -:  780:
        -:  781:      //+1 Actions
    #####:  782:      state->numActions++;
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  786:      return 0;
        -:  787:
        -:  788:    case minion:
        -:  789:      //+1 action
    #####:  790:      state->numActions++;
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
    #####:  795:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  state->coins = state->coins + 2;
        -:  798:	}
        -:  799:
    #####:  800:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:	{
        -:  802:	  //discard hand
    #####:  803:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:	    {
    #####:  805:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  806:	    }
        -:  807:
        -:  808:	  //draw 4
    #####:  809:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	    }
        -:  813:
        -:  814:	  //other players discard hand and redraw if hand size > 4
    #####:  815:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	    {
    #####:  817:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:		{
    #####:  819:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:		    {
        -:  821:		      //discard hand
    #####:  822:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  823:			{
    #####:  824:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  825:			}
        -:  826:
        -:  827:		      //draw 4
    #####:  828:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  829:			{
    #####:  830:			  drawCard(i, state);
call    0 never executed
        -:  831:			}
        -:  832:		    }
        -:  833:		}
        -:  834:	    }
        -:  835:
        -:  836:	}
    #####:  837:      return 0;
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  864:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:	  state->deckCount[nextPlayer]--;
        -:  867:	}
    #####:  868:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  870:	  state->discardCount[nextPlayer]--;
        -:  871:	}
        -:  872:	else{
        -:  873:	  //No Card to Reveal
        -:  874:	  if (DEBUG){
        -:  875:	    printf("No cards to reveal\n");
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	}
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }
        -:  898:
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case ambassador:
    #####:  922:      j = 0;		//used to check if player has enough cards to discard
        -:  923:
    #####:  924:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  937:	    {
    #####:  938:	      j++;
        -:  939:	    }
        -:  940:	}
    #####:  941:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      if (DEBUG)
        -:  947:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  948:
        -:  949:      //increase supply count for choosen card by amount being discarded
    #####:  950:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  951:
        -:  952:      //each other player gains a copy of revealed card
    #####:  953:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:
        -:  964:      //trash copies of cards returned to supply
    #####:  965:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  972:		  break;
        -:  973:		}
        -:  974:	    }
        -:  975:	}
        -:  976:
    #####:  977:      return 0;
        -:  978:
        -:  979:    case cutpurse:
        -:  980:
    #####:  981:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  989:		    {
    #####:  990:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  991:		      break;
        -:  992:		    }
    #####:  993:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  994:		    {
    #####:  995:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
        -:  997:			  if (DEBUG)
        -:  998:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  999:			}
    #####: 1000:		      break;
        -: 1001:		    }
        -: 1002:		}
        -: 1003:
        -: 1004:	    }
        -: 1005:
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:
        -: 1014:    case embargo:
        -: 1015:      //+2 Coins
    #####: 1016:      state->coins = state->coins + 2;
        -: 1017:
        -: 1018:      //see if selected pile is in play
    #####: 1019:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;
        -: 1022:	}
        -: 1023:
        -: 1024:      //add embargo token to selected supply pile
    #####: 1025:      state->embargoTokens[choice1]++;
        -: 1026:
        -: 1027:      //trash card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:
        -: 1031:    case outpost:
        -: 1032:      //set outpost flag
    #####: 1033:      state->outpostPlayed++;
        -: 1034:
        -: 1035:      //discard card
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:
        -: 1039:    case salvager:
        -: 1040:      //+1 buy
    #####: 1041:      state->numBuys++;
        -: 1042:
    #####: 1043:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
        -: 1045:	  //gain coins equal to trashed card
    #####: 1046:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1047:	  //trash card
    #####: 1048:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:    case sea_hag:
    #####: 1056:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1059:	  state->discardCount[i]++;
    #####: 1060:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1061:	}
        -: 1062:      }
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case treasure_map:
        -: 1066:      //search hand for another treasure_map
    #####: 1067:      index = -1;
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	    {
    #####: 1072:	      index = i;
    #####: 1073:	      break;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //trash both treasure cards
    #####: 1079:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1081:
        -: 1082:	  //gain 4 Gold cards
    #####: 1083:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1086:	    }
        -: 1087:
        -: 1088:	  //return success
    #####: 1089:	  return 1;
        -: 1090:	}
        -: 1091:
        -: 1092:      //no second treasure_map found in hand
    #####: 1093:      return -1;
        -: 1094:    }
        -: 1095:
    #####: 1096:  return -1;
        -: 1097:}
        -: 1098:
        -: 1099:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1100:int adventurerCard(struct gameState *state)
        -: 1101:{
    #####: 1102:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1103:
        -: 1104:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1105:  int drawntreasure=0;
        -: 1106:  int cardDrawn;
    #####: 1107:  int z = 0;// this is the counter for the temp hand
        -: 1108:
    #####: 1109:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1110:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1111:          shuffle(currentPlayer, state);
call    0 never executed
        -: 1112:        }
    #####: 1113:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1114:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1115:        //
        -: 1116:        /** Bug: replaced 'cardDrawn == copper' with '(cardDrawn = copper)' **/
        -: 1117:        //if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1118:        if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1119:          drawntreasure++;
        -: 1120:        else{
        -: 1121:          temphand[z]=cardDrawn;
        -: 1122:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1123:          z++;
        -: 1124:        }
        -: 1125:	}
        -: 1126:
    #####: 1127:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1128:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1129:        z=z-1;
        -: 1130:    }
    #####: 1131:    return 0;
        -: 1132:}
        -: 1133:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1134:int smithyCard(struct gameState *state, int handPos)
        -: 1135:{
        -: 1136:    int i;
    #####: 1137:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1138:      //+3 Cards
        -: 1139:      //for (i = 0; i < 3; i++)
        -: 1140:      /** Bug: replaced 'i < 3' with 'i <= 3' **/
    #####: 1141:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1144:	}
        -: 1145:      //discard card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1147:      return 0;
        -: 1148:}
        -: 1149:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1150:int mineCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1151:{
        -: 1152:      int i;
        -: 1153:      int j;
    #####: 1154:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1155:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1156:
    #####: 1157:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
        -: 1162:    //if (choice2 > treasure_map || choice2 < curse)
        -: 1163:    /** Bug: replaced '||' with '&&' **/
    #####: 1164:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1175:
        -: 1176:      //discard card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1178:
        -: 1179:      //discard trashed card
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:	      break;
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
    #####: 1189:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1190:
    #####: 1191:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:
    #####: 1201:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
    #####: 1206:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1207:
        -: 1208:      //discard card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1210:
        -: 1211:      //discard trashed card
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:	      break;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      return 0;
        -: 1221:}
        -: 1222:
        -: 1223:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1224:int council_roomCard(struct gameState *state, int handPos) {
        -: 1225:
        -: 1226:    int i;
    #####: 1227:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1228:      //+4 Cards
    #####: 1229:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //+1 Buy
    #####: 1235:      state->numBuys++;
        -: 1236:
        -: 1237:      //Each other player draws a card
        -: 1238:      //for (i = 0; i < state->numPlayers; i++)
        -: 1239:      /** Bug: replace '<' with '<=' **/
    #####: 1240:      for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      drawCard(i, state);
call    0 never executed
        -: 1245:	    }
        -: 1246:	}
        -: 1247:
        -: 1248:      //put played card in played card pile
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1250:
        -: 1251:      //+4 Cards
    #####: 1252:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:	}
        -: 1256:
        -: 1257:      //+1 Buy
    #####: 1258:      state->numBuys++;
        -: 1259:
        -: 1260:      //Each other player draws a card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      drawCard(i, state);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //put played card in played card pile
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1271:
    #####: 1272:      return 0;
        -: 1273:}
        -: 1274:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1275:int feastCard(struct gameState *state, int choice1, int handPos)
        -: 1276:{
        -: 1277:    int i;
        -: 1278:    int x;
    #####: 1279:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1280:    int temphand[MAX_HAND];// moved above the if statement
        -: 1281:
        -: 1282:      //gain card with cost up to 5
        -: 1283:      //Backup hand
    #####: 1284:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1286:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1287:      }
        -: 1288:      //Backup hand
        -: 1289:
        -: 1290:      //Update Coins for Buy
    #####: 1291:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1292:      x = 1;//Condition to loop on
    #####: 1293:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1294:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1295:          if (DEBUG)
        -: 1296:            printf("None of that card left, sorry!\n");
        -: 1297:
        -: 1298:          if (DEBUG){
        -: 1299:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1300:          }
        -: 1301:        }
    #####: 1302:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:          printf("That card is too expensive!\n");
call    0 never executed
        -: 1304:
        -: 1305:          if (DEBUG){
        -: 1306:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1307:          }
        -: 1308:        }
        -: 1309:        else{
        -: 1310:
        -: 1311:          if (DEBUG){
        -: 1312:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1313:          }
        -: 1314:
    #####: 1315:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1316:          x = 0;//No more buying cards
        -: 1317:
        -: 1318:          if (DEBUG){
        -: 1319:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1320:          }
        -: 1321:        }
        -: 1322:    }
        -: 1323:
        -: 1324:      //Reset Hand
    #####: 1325:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1327:        temphand[i] = -1;
        -: 1328:      }
        -: 1329:      //Reset Hand
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:}
        -: 1333:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:
        -: 1337:  //if card is not trashed, added to Played pile
    #####: 1338:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
        -: 1340:      //add card to played pile
    #####: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:
        -: 1345:  //set played card to -1
    #####: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:
        -: 1348:  //remove card from player's hand
    #####: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
    #####: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
    #####: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
    #####: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
    #####: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
    #####: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:
    #####: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1378:    {
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
    #####: 1387:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1388:    {
    #####: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1390:      state->deckCount[player]++;
        -: 1391:    }
    #####: 1392:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1393:    {
    #####: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
    #####: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:
        -: 1403:  //decrease number in supply pile
    #####: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:
    #####: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 12 returned 100% blocks executed 82%
       12: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:
        -: 1413:  //reset coin count
       12: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
       72: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
       60: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 1420:	{
       41: 1421:	  state->coins += 1;
        -: 1422:	}
       19: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
       19: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}
        -: 1431:    }
        -: 1432:
        -: 1433:  //add bonus
       12: 1434:  state->coins += bonus;
        -: 1435:
       12: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end of dominion.c
unittest4.c:
----------------- unittest4 Testing: discardCard() ----------------
***Switching to a 2 player game.
***Switching to player 0.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 1, expected: 1
G.hand[0][0]: 8, expected: 8
G.hand[0][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 1, expected: 1
G.hand[0][1]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][0]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][1]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][2]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][1]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][2]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][3]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][1]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][2]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][3]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[0][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][4]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 1, expected: 1
G.hand[0][0]: 8, expected: 8
G.hand[0][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 1, expected: 1
G.hand[0][1]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][0]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][1]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][2]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][1]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][2]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][3]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][1]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][2]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][3]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][4]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
***Switching to player 1.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 1, expected: 1
G.hand[1][0]: 8, expected: 8
G.hand[1][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 1, expected: 1
G.hand[1][1]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][0]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][1]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][2]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][0]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][1]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][2]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][3]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][0]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][1]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][2]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][3]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[1][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][4]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 1, expected: 1
G.hand[1][0]: 8, expected: 8
G.hand[1][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 1, expected: 1
G.hand[1][1]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][0]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][1]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][2]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][0]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][1]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][2]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][3]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][0]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][1]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][2]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][3]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][4]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
***Switching to a 3 player game.
***Switching to player 0.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 1, expected: 1
G.hand[0][0]: 8, expected: 8
G.hand[0][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 1, expected: 1
G.hand[0][1]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][0]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][1]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][2]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][1]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][2]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][3]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][1]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][2]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][3]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[0][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][4]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 1, expected: 1
G.hand[0][0]: 8, expected: 8
G.hand[0][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 1, expected: 1
G.hand[0][1]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][0]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][1]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][2]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][1]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][2]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][3]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][1]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][2]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][3]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][4]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
***Switching to player 1.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 1, expected: 1
G.hand[1][0]: 8, expected: 8
G.hand[1][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 1, expected: 1
G.hand[1][1]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][0]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][1]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][2]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][0]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][1]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][2]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][3]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][0]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][1]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][2]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][3]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[1][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][4]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 1, expected: 1
G.hand[1][0]: 8, expected: 8
G.hand[1][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 1, expected: 1
G.hand[1][1]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][0]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][1]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][2]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][0]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][1]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][2]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][3]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][0]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][1]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][2]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][3]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][4]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
***Switching to player 2.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 0, expected: 0
G.hand[2][0]: -1, expected: -1
G.hand[2][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 1, expected: 1
G.hand[2][0]: 8, expected: 8
G.hand[2][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 1, expected: 1
G.hand[2][1]: -1, expected: -1
G.hand[2][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 2, expected: 2
G.hand[2][0]: 9, expected: 9
G.hand[2][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 2, expected: 2
G.hand[2][1]: 9, expected: 9
G.hand[2][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 2, expected: 2
G.hand[2][2]: -1, expected: -1
G.hand[2][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 3, expected: 3
G.hand[2][0]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 3, expected: 3
G.hand[2][1]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 3, expected: 3
G.hand[2][2]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[2][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 3, expected: 3
G.hand[2][3]: -1, expected: -1
G.hand[2][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][0]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][1]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][2]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[2][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][3]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[2][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][4]: -1, expected: -1
G.hand[2][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 0, expected: 0
G.hand[2][0]: -1, expected: -1
G.hand[2][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 1, expected: 1
G.hand[2][0]: 8, expected: 8
G.hand[2][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 1, expected: 1
G.hand[2][1]: -1, expected: -1
G.hand[2][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 2, expected: 2
G.hand[2][0]: 9, expected: 9
G.hand[2][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 2, expected: 2
G.hand[2][1]: 9, expected: 9
G.hand[2][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 2, expected: 2
G.hand[2][2]: -1, expected: -1
G.hand[2][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 3, expected: 3
G.hand[2][0]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 3, expected: 3
G.hand[2][1]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 3, expected: 3
G.hand[2][2]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 3, expected: 3
G.hand[2][3]: -1, expected: -1
G.hand[2][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][0]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][1]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][2]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][3]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][4]: -1, expected: -1
G.hand[2][4]: -1, expected: -1
***Switching to a 4 player game.
***Switching to player 0.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 1, expected: 1
G.hand[0][0]: 8, expected: 8
G.hand[0][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 1, expected: 1
G.hand[0][1]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][0]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][1]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 2, expected: 2
G.hand[0][2]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][1]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][2]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 3, expected: 3
G.hand[0][3]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][1]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][2]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][3]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[0][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][4]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 0, expected: 0
G.hand[0][0]: -1, expected: -1
G.hand[0][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 1, expected: 1
G.hand[0][0]: 8, expected: 8
G.hand[0][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 1, expected: 1
G.hand[0][1]: -1, expected: -1
G.hand[0][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][0]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][1]: 9, expected: 9
G.hand[0][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 2, expected: 2
G.hand[0][2]: -1, expected: -1
G.hand[0][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][1]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][2]: 10, expected: 10
G.hand[0][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 3, expected: 3
G.hand[0][3]: -1, expected: -1
G.hand[0][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][1]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][2]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][3]: 11, expected: 11
G.hand[0][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[0][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[0]: 4, expected: 4
G.hand[0][4]: -1, expected: -1
G.hand[0][4]: -1, expected: -1
***Switching to player 1.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 1, expected: 1
G.hand[1][0]: 8, expected: 8
G.hand[1][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 1, expected: 1
G.hand[1][1]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][0]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][1]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 2, expected: 2
G.hand[1][2]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][0]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][1]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][2]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 3, expected: 3
G.hand[1][3]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][0]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][1]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][2]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][3]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[1][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[1]: 4, expected: 4
G.hand[1][4]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 0, expected: 0
G.hand[1][0]: -1, expected: -1
G.hand[1][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 1, expected: 1
G.hand[1][0]: 8, expected: 8
G.hand[1][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 1, expected: 1
G.hand[1][1]: -1, expected: -1
G.hand[1][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][0]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][1]: 9, expected: 9
G.hand[1][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 2, expected: 2
G.hand[1][2]: -1, expected: -1
G.hand[1][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][0]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][1]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][2]: 10, expected: 10
G.hand[1][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 3, expected: 3
G.hand[1][3]: -1, expected: -1
G.hand[1][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][0]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][1]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][2]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][3]: 11, expected: 11
G.hand[1][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[1][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[1]: 4, expected: 4
G.hand[1][4]: -1, expected: -1
G.hand[1][4]: -1, expected: -1
***Switching to player 2.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 0, expected: 0
G.hand[2][0]: -1, expected: -1
G.hand[2][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 1, expected: 1
G.hand[2][0]: 8, expected: 8
G.hand[2][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 1, expected: 1
G.hand[2][1]: -1, expected: -1
G.hand[2][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 2, expected: 2
G.hand[2][0]: 9, expected: 9
G.hand[2][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 2, expected: 2
G.hand[2][1]: 9, expected: 9
G.hand[2][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 2, expected: 2
G.hand[2][2]: -1, expected: -1
G.hand[2][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 3, expected: 3
G.hand[2][0]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 3, expected: 3
G.hand[2][1]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 3, expected: 3
G.hand[2][2]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[2][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 3, expected: 3
G.hand[2][3]: -1, expected: -1
G.hand[2][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][0]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][1]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][2]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[2][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][3]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[2][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[2]: 4, expected: 4
G.hand[2][4]: -1, expected: -1
G.hand[2][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 0, expected: 0
G.hand[2][0]: -1, expected: -1
G.hand[2][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 1, expected: 1
G.hand[2][0]: 8, expected: 8
G.hand[2][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 1, expected: 1
G.hand[2][1]: -1, expected: -1
G.hand[2][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 2, expected: 2
G.hand[2][0]: 9, expected: 9
G.hand[2][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 2, expected: 2
G.hand[2][1]: 9, expected: 9
G.hand[2][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 2, expected: 2
G.hand[2][2]: -1, expected: -1
G.hand[2][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 3, expected: 3
G.hand[2][0]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 3, expected: 3
G.hand[2][1]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 3, expected: 3
G.hand[2][2]: 10, expected: 10
G.hand[2][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 3, expected: 3
G.hand[2][3]: -1, expected: -1
G.hand[2][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][0]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][1]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][2]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][3]: 11, expected: 11
G.hand[2][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[2][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[2]: 4, expected: 4
G.hand[2][4]: -1, expected: -1
G.hand[2][4]: -1, expected: -1
***Switching to player 3.
***trashFlag: 0.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 0, expected: 0
G.hand[3][0]: -1, expected: -1
G.hand[3][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 1, expected: 1
G.hand[3][0]: 8, expected: 8
G.hand[3][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[3][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 1, expected: 1
G.hand[3][1]: -1, expected: -1
G.hand[3][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 2, expected: 2
G.hand[3][0]: 9, expected: 9
G.hand[3][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[3][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 2, expected: 2
G.hand[3][1]: 9, expected: 9
G.hand[3][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[3][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 2, expected: 2
G.hand[3][2]: -1, expected: -1
G.hand[3][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 3, expected: 3
G.hand[3][0]: 10, expected: 10
G.hand[3][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[3][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 3, expected: 3
G.hand[3][1]: 10, expected: 10
G.hand[3][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[3][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 3, expected: 3
G.hand[3][2]: 10, expected: 10
G.hand[3][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[3][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 3, expected: 3
G.hand[3][3]: -1, expected: -1
G.hand[3][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: 7	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 4, expected: 4
G.hand[3][0]: 11, expected: 11
G.hand[3][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[3][0]: -1, expected: 8	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 4, expected: 4
G.hand[3][1]: 11, expected: 11
G.hand[3][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[3][0]: -1, expected: 9	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 4, expected: 4
G.hand[3][2]: 11, expected: 11
G.hand[3][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[3][0]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 4, expected: 4
G.hand[3][3]: 11, expected: 11
G.hand[3][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[3][0]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[p]: 0, expected: 1	<------------------- TEST FAILED
G.handCount[3]: 4, expected: 4
G.hand[3][4]: -1, expected: -1
G.hand[3][4]: -1, expected: -1
***trashFlag: 1.
***Cards in Hand: 1.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 0, expected: 0
G.hand[3][0]: -1, expected: -1
G.hand[3][0]: -1, expected: -1
***Cards in Hand: 2.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 1, expected: 1
G.hand[3][0]: 8, expected: 8
G.hand[3][1]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 1, expected: 1
G.hand[3][1]: -1, expected: -1
G.hand[3][1]: -1, expected: -1
***Cards in Hand: 3.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 2, expected: 2
G.hand[3][0]: 9, expected: 9
G.hand[3][2]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 2, expected: 2
G.hand[3][1]: 9, expected: 9
G.hand[3][2]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 2, expected: 2
G.hand[3][2]: -1, expected: -1
G.hand[3][2]: -1, expected: -1
***Cards in Hand: 4.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 3, expected: 3
G.hand[3][0]: 10, expected: 10
G.hand[3][3]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 3, expected: 3
G.hand[3][1]: 10, expected: 10
G.hand[3][3]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 3, expected: 3
G.hand[3][2]: 10, expected: 10
G.hand[3][3]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 3, expected: 3
G.hand[3][3]: -1, expected: -1
G.hand[3][3]: -1, expected: -1
***Cards in Hand: 5.
***Discarding card at position 0 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 4, expected: 4
G.hand[3][0]: 11, expected: 11
G.hand[3][4]: -1, expected: -1
***Discarding card at position 1 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 4, expected: 4
G.hand[3][1]: 11, expected: 11
G.hand[3][4]: -1, expected: -1
***Discarding card at position 2 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 4, expected: 4
G.hand[3][2]: 11, expected: 11
G.hand[3][4]: -1, expected: -1
***Discarding card at position 3 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 4, expected: 4
G.hand[3][3]: 11, expected: 11
G.hand[3][4]: -1, expected: -1
***Discarding card at position 4 in hand.
G.discard[3][0]: -1, expected: -1
G.discardCount[p]: 0, expected: 0
G.handCount[3]: 4, expected: 4
G.hand[3][4]: -1, expected: -1
G.hand[3][4]: -1, expected: -1

UNIT TEST unittest4 COMPLETED: 270 failures!

File 'dominion.c'
Lines executed:18.62% of 580
Branches executed:17.17% of 431
Taken at least once:14.85% of 431
Calls executed:6.48% of 108
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 13050 returned 100% blocks executed 83%
    13050:    8:int compare(const void* a, const void* b) {
    13050:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    13050:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     3480:   12:    return -1;
     9570:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 270 returned 100% blocks executed 95%
      270:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
      270:   44:  SelectStream(1);
call    0 returned 100%
      270:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
      270:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      270:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2970:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    29700:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    27000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      270:   73:  if (numPlayers == 2)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:   74:    {
       60:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      210:   77:  else if (numPlayers == 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   78:    {
       90:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      120:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      270:   87:  if (numPlayers == 2)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:   88:    {
       60:   89:      state->supplyCount[estate] = 8;
       60:   90:      state->supplyCount[duchy] = 8;
       60:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      210:   95:      state->supplyCount[estate] = 12;
      210:   96:      state->supplyCount[duchy] = 12;
      210:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      270:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      270:  102:  state->supplyCount[silver] = 40;
      270:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     5670:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    44550:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    41850:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     2700:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     1080:  115:		  if (numPlayers == 2){
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
      120:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
      420:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2160:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2700:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    39150:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1140:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  139:    {
      870:  140:      state->deckCount[i] = 0;
     3480:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     2610:  143:	  state->deck[i][j] = estate;
     2610:  144:	  state->deckCount[i]++;
        -:  145:	}
     6960:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     6090:  148:	  state->deck[i][j] = copper;
     6090:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1140:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  155:    {
      870:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1140:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
      870:  166:      state->handCount[i] = 0;
      870:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     7560:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     7290:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      270:  182:  state->outpostPlayed = 0;
      270:  183:  state->phase = 0;
      270:  184:  state->numActions = 1;
      270:  185:  state->numBuys = 1;
      270:  186:  state->playedCardCount = 0;
      270:  187:  state->whoseTurn = 0;
      270:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1620:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1350:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      270:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      270:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 870 returned 100% blocks executed 94%
      870:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      870:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      870:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      870:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    10440:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     8700:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     8700:  216:    newDeck[newDeckPos] = state->deck[player][card];
     8700:  217:    newDeckPos++;
    30330:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    21630:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     8700:  221:    state->deckCount[player]--;
        -:  222:  }
     9570:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     8700:  224:    state->deck[player][i] = newDeck[i];
     8700:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      870:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1350 returned 100% blocks executed 38%
     1350:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1350:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1350:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1350:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1350:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1350:  576:    state->deckCount[player]--;
     1350:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1350:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  // function prototypes for cards
        -:  649:  int adventurerCard(struct gameState *state);
        -:  650:  int smithyCard(struct gameState *state, int handPos);
        -:  651:  int mineCard(struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:  int council_roomCard(struct gameState *state, int handPos);
        -:  653:  int feastCard(struct gameState *state, int choice1, int handPos);
        -:  654:
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int index;
    #####:  659:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
    #####:  662:  int tributeRevealedCards[2] = {-1, -1};
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:    case council_room:
    #####:  675:        return council_roomCard(state, handPos);
call    0 never executed
        -:  676:
        -:  677:    case feast:
    #####:  678:        return feastCard(state, choice1, handPos);
call    0 never executed
        -:  679:
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:
        -:  683:    case mine:
    #####:  684:      return mineCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  685:
        -:  686:    case remodel:
    #####:  687:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  688:
    #####:  689:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  695:
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:      //discard trashed card
    #####:  700:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  701:	{
    #####:  702:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  703:	    {
    #####:  704:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:
    #####:  710:      return 0;
        -:  711:
        -:  712:    case smithy:
    #####:  713:        return smithyCard(state, handPos);
call    0 never executed
        -:  714:
        -:  715:    case village:
        -:  716:      //+1 Card
    #####:  717:      drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:      //+2 Actions
    #####:  720:      state->numActions = state->numActions + 2;
        -:  721:
        -:  722:      //discard played card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:      return 0;
        -:  725:
        -:  726:    case baron:
    #####:  727:      state->numBuys++;//Increase buys by 1!
    #####:  728:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  729:	int p = 0;//Iterator for hand!
    #####:  730:	int card_not_discarded = 1;//Flag for discard set!
    #####:  731:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  732:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  733:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  734:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  735:	    state->discardCount[currentPlayer]++;
    #####:  736:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  737:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:	    }
    #####:  739:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  740:	    state->handCount[currentPlayer]--;
    #####:  741:	    card_not_discarded = 0;//Exit the loop
        -:  742:	  }
    #####:  743:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  744:	    if(DEBUG) {
        -:  745:	      printf("No estate cards in your hand, invalid choice\n");
        -:  746:	      printf("Must gain an estate if there are any\n");
        -:  747:	    }
    #####:  748:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  750:	      state->supplyCount[estate]--;//Decrement estates
    #####:  751:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:		isGameOver(state);
call    0 never executed
        -:  753:	      }
        -:  754:	    }
    #####:  755:	    card_not_discarded = 0;//Exit the loop
        -:  756:	  }
        -:  757:
        -:  758:	  else{
    #####:  759:	    p++;//Next card
        -:  760:	  }
        -:  761:	}
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  767:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  768:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	    isGameOver(state);
call    0 never executed
        -:  770:	  }
        -:  771:	}
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:    case great_hall:
        -:  778:      //+1 Card
    #####:  779:      drawCard(currentPlayer, state);
call    0 never executed
        -:  780:
        -:  781:      //+1 Actions
    #####:  782:      state->numActions++;
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  786:      return 0;
        -:  787:
        -:  788:    case minion:
        -:  789:      //+1 action
    #####:  790:      state->numActions++;
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
    #####:  795:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  state->coins = state->coins + 2;
        -:  798:	}
        -:  799:
    #####:  800:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:	{
        -:  802:	  //discard hand
    #####:  803:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:	    {
    #####:  805:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  806:	    }
        -:  807:
        -:  808:	  //draw 4
    #####:  809:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	    }
        -:  813:
        -:  814:	  //other players discard hand and redraw if hand size > 4
    #####:  815:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	    {
    #####:  817:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:		{
    #####:  819:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:		    {
        -:  821:		      //discard hand
    #####:  822:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  823:			{
    #####:  824:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  825:			}
        -:  826:
        -:  827:		      //draw 4
    #####:  828:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  829:			{
    #####:  830:			  drawCard(i, state);
call    0 never executed
        -:  831:			}
        -:  832:		    }
        -:  833:		}
        -:  834:	    }
        -:  835:
        -:  836:	}
    #####:  837:      return 0;
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  864:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:	  state->deckCount[nextPlayer]--;
        -:  867:	}
    #####:  868:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  870:	  state->discardCount[nextPlayer]--;
        -:  871:	}
        -:  872:	else{
        -:  873:	  //No Card to Reveal
        -:  874:	  if (DEBUG){
        -:  875:	    printf("No cards to reveal\n");
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	}
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }
        -:  898:
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case ambassador:
    #####:  922:      j = 0;		//used to check if player has enough cards to discard
        -:  923:
    #####:  924:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  937:	    {
    #####:  938:	      j++;
        -:  939:	    }
        -:  940:	}
    #####:  941:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      if (DEBUG)
        -:  947:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  948:
        -:  949:      //increase supply count for choosen card by amount being discarded
    #####:  950:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  951:
        -:  952:      //each other player gains a copy of revealed card
    #####:  953:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:
        -:  964:      //trash copies of cards returned to supply
    #####:  965:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  972:		  break;
        -:  973:		}
        -:  974:	    }
        -:  975:	}
        -:  976:
    #####:  977:      return 0;
        -:  978:
        -:  979:    case cutpurse:
        -:  980:
    #####:  981:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  989:		    {
    #####:  990:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  991:		      break;
        -:  992:		    }
    #####:  993:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  994:		    {
    #####:  995:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
        -:  997:			  if (DEBUG)
        -:  998:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  999:			}
    #####: 1000:		      break;
        -: 1001:		    }
        -: 1002:		}
        -: 1003:
        -: 1004:	    }
        -: 1005:
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:
        -: 1014:    case embargo:
        -: 1015:      //+2 Coins
    #####: 1016:      state->coins = state->coins + 2;
        -: 1017:
        -: 1018:      //see if selected pile is in play
    #####: 1019:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;
        -: 1022:	}
        -: 1023:
        -: 1024:      //add embargo token to selected supply pile
    #####: 1025:      state->embargoTokens[choice1]++;
        -: 1026:
        -: 1027:      //trash card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:
        -: 1031:    case outpost:
        -: 1032:      //set outpost flag
    #####: 1033:      state->outpostPlayed++;
        -: 1034:
        -: 1035:      //discard card
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:
        -: 1039:    case salvager:
        -: 1040:      //+1 buy
    #####: 1041:      state->numBuys++;
        -: 1042:
    #####: 1043:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
        -: 1045:	  //gain coins equal to trashed card
    #####: 1046:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1047:	  //trash card
    #####: 1048:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:    case sea_hag:
    #####: 1056:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1059:	  state->discardCount[i]++;
    #####: 1060:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1061:	}
        -: 1062:      }
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case treasure_map:
        -: 1066:      //search hand for another treasure_map
    #####: 1067:      index = -1;
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	    {
    #####: 1072:	      index = i;
    #####: 1073:	      break;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //trash both treasure cards
    #####: 1079:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1081:
        -: 1082:	  //gain 4 Gold cards
    #####: 1083:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1086:	    }
        -: 1087:
        -: 1088:	  //return success
    #####: 1089:	  return 1;
        -: 1090:	}
        -: 1091:
        -: 1092:      //no second treasure_map found in hand
    #####: 1093:      return -1;
        -: 1094:    }
        -: 1095:
    #####: 1096:  return -1;
        -: 1097:}
        -: 1098:
        -: 1099:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1100:int adventurerCard(struct gameState *state)
        -: 1101:{
    #####: 1102:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1103:
        -: 1104:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1105:  int drawntreasure=0;
        -: 1106:  int cardDrawn;
    #####: 1107:  int z = 0;// this is the counter for the temp hand
        -: 1108:
    #####: 1109:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1110:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1111:          shuffle(currentPlayer, state);
call    0 never executed
        -: 1112:        }
    #####: 1113:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1114:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1115:        //
        -: 1116:        /** Bug: replaced 'cardDrawn == copper' with '(cardDrawn = copper)' **/
        -: 1117:        //if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1118:        if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1119:          drawntreasure++;
        -: 1120:        else{
        -: 1121:          temphand[z]=cardDrawn;
        -: 1122:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1123:          z++;
        -: 1124:        }
        -: 1125:	}
        -: 1126:
    #####: 1127:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1128:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1129:        z=z-1;
        -: 1130:    }
    #####: 1131:    return 0;
        -: 1132:}
        -: 1133:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1134:int smithyCard(struct gameState *state, int handPos)
        -: 1135:{
        -: 1136:    int i;
    #####: 1137:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1138:      //+3 Cards
        -: 1139:      //for (i = 0; i < 3; i++)
        -: 1140:      /** Bug: replaced 'i < 3' with 'i <= 3' **/
    #####: 1141:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1144:	}
        -: 1145:      //discard card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1147:      return 0;
        -: 1148:}
        -: 1149:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1150:int mineCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1151:{
        -: 1152:      int i;
        -: 1153:      int j;
    #####: 1154:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1155:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1156:
    #####: 1157:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
        -: 1162:    //if (choice2 > treasure_map || choice2 < curse)
        -: 1163:    /** Bug: replaced '||' with '&&' **/
    #####: 1164:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1175:
        -: 1176:      //discard card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1178:
        -: 1179:      //discard trashed card
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:	      break;
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
    #####: 1189:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1190:
    #####: 1191:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:
    #####: 1201:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
    #####: 1206:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1207:
        -: 1208:      //discard card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1210:
        -: 1211:      //discard trashed card
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:	      break;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      return 0;
        -: 1221:}
        -: 1222:
        -: 1223:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1224:int council_roomCard(struct gameState *state, int handPos) {
        -: 1225:
        -: 1226:    int i;
    #####: 1227:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1228:      //+4 Cards
    #####: 1229:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //+1 Buy
    #####: 1235:      state->numBuys++;
        -: 1236:
        -: 1237:      //Each other player draws a card
        -: 1238:      //for (i = 0; i < state->numPlayers; i++)
        -: 1239:      /** Bug: replace '<' with '<=' **/
    #####: 1240:      for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      drawCard(i, state);
call    0 never executed
        -: 1245:	    }
        -: 1246:	}
        -: 1247:
        -: 1248:      //put played card in played card pile
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1250:
        -: 1251:      //+4 Cards
    #####: 1252:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:	}
        -: 1256:
        -: 1257:      //+1 Buy
    #####: 1258:      state->numBuys++;
        -: 1259:
        -: 1260:      //Each other player draws a card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      drawCard(i, state);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //put played card in played card pile
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1271:
    #####: 1272:      return 0;
        -: 1273:}
        -: 1274:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1275:int feastCard(struct gameState *state, int choice1, int handPos)
        -: 1276:{
        -: 1277:    int i;
        -: 1278:    int x;
    #####: 1279:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1280:    int temphand[MAX_HAND];// moved above the if statement
        -: 1281:
        -: 1282:      //gain card with cost up to 5
        -: 1283:      //Backup hand
    #####: 1284:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1286:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1287:      }
        -: 1288:      //Backup hand
        -: 1289:
        -: 1290:      //Update Coins for Buy
    #####: 1291:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1292:      x = 1;//Condition to loop on
    #####: 1293:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1294:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1295:          if (DEBUG)
        -: 1296:            printf("None of that card left, sorry!\n");
        -: 1297:
        -: 1298:          if (DEBUG){
        -: 1299:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1300:          }
        -: 1301:        }
    #####: 1302:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:          printf("That card is too expensive!\n");
call    0 never executed
        -: 1304:
        -: 1305:          if (DEBUG){
        -: 1306:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1307:          }
        -: 1308:        }
        -: 1309:        else{
        -: 1310:
        -: 1311:          if (DEBUG){
        -: 1312:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1313:          }
        -: 1314:
    #####: 1315:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1316:          x = 0;//No more buying cards
        -: 1317:
        -: 1318:          if (DEBUG){
        -: 1319:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1320:          }
        -: 1321:        }
        -: 1322:    }
        -: 1323:
        -: 1324:      //Reset Hand
    #####: 1325:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1327:        temphand[i] = -1;
        -: 1328:      }
        -: 1329:      //Reset Hand
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:}
        -: 1333:
function discardCard called 270 returned 100% blocks executed 89%
      270: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:
        -: 1337:  //if card is not trashed, added to Played pile
      270: 1338:  if (trashFlag < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1339:    {
        -: 1340:      //add card to played pile
      135: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      135: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:
        -: 1345:  //set played card to -1
      270: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:
        -: 1348:  //remove card from player's hand
      270: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
       90: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
      180: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
      180: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
      180: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
      180: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:
      270: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1378:    {
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
    #####: 1387:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1388:    {
    #####: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1390:      state->deckCount[player]++;
        -: 1391:    }
    #####: 1392:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1393:    {
    #####: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
    #####: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:
        -: 1403:  //decrease number in supply pile
    #####: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:
    #####: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 270 returned 100% blocks executed 82%
      270: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:
        -: 1413:  //reset coin count
      270: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
     1620: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
     1350: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1420:	{
     1080: 1421:	  state->coins += 1;
        -: 1422:	}
      270: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
      270: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}
        -: 1431:    }
        -: 1432:
        -: 1433:  //add bonus
      270: 1434:  state->coins += bonus;
        -: 1435:
      270: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end of dominion.c
cardtest1.c:
----------------- cardtest1 Testing: adventurerCard() ----------------
TEST 1: LAST 2 CARDS ARE TREASURE
G.handCount[0]: 7, expected: 7
G.hand[0][5]: 15, expected: 5	<------------------- TEST FAILED
G.hand[0][6]: 14, expected: 4	<------------------- TEST FAILED
G.deckCount[0]: 4, expected: 0	<------------------- TEST FAILED
G.discardCount[0]: 0, expected: 4	<------------------- TEST FAILED
TEST 2: FIRST 2 CARDS ARE TREASURE
G.handCount[0]: 7, expected: 7
G.hand[0][5]: 6, expected: 6
G.hand[0][6]: 4, expected: 4
G.deckCount[0]: 4, expected: 4
G.deck[0][0]: 12, expected: 12
G.deck[0][1]: 13, expected: 13
G.deck[0][2]: 14, expected: 14
G.deck[0][3]: 15, expected: 15
G.discardCount[0]: 0, expected: 0
TEST 3: FIRST AND LAST CARDS ARE TREASURE
G.handCount[0]: 7, expected: 7
G.hand[0][5]: 6, expected: 6
G.hand[0][6]: 15, expected: 5	<------------------- TEST FAILED
G.deckCount[0]: 4, expected: 0	<------------------- TEST FAILED
G.discardCount[0]: 0, expected: 4	<------------------- TEST FAILED
TEST 4: TREASURE CARDS ARE IN THE MIDDLE
G.handCount[0]: 7, expected: 7
G.hand[0][5]: 15, expected: 5	<------------------- TEST FAILED
G.hand[0][6]: 5, expected: 5
G.deckCount[0]: 4, expected: 1	<------------------- TEST FAILED
G.discardCount[0]: 0, expected: 3	<------------------- TEST FAILED

UNIT TEST cardtest1 COMPLETED: 10 failures!

File 'dominion.c'
Lines executed:17.76% of 580
Branches executed:16.71% of 431
Taken at least once:13.46% of 431
Calls executed:8.33% of 108
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 120 returned 100% blocks executed 83%
      120:    8:int compare(const void* a, const void* b) {
      120:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      120:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       32:   12:    return -1;
       88:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 4 returned 100% blocks executed 88%
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
call    0 returned 100%
        4:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       16:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       32:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 8 returned 100% blocks executed 94%
        8:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       96:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       80:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      280:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        8:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 28 returned 100% blocks executed 38%
       28:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       28:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       28:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       28:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       28:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       28:  576:    state->deckCount[player]--;
       28:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       28:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  // function prototypes for cards
        -:  649:  int adventurerCard(struct gameState *state);
        -:  650:  int smithyCard(struct gameState *state, int handPos);
        -:  651:  int mineCard(struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:  int council_roomCard(struct gameState *state, int handPos);
        -:  653:  int feastCard(struct gameState *state, int choice1, int handPos);
        -:  654:
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int index;
    #####:  659:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
    #####:  662:  int tributeRevealedCards[2] = {-1, -1};
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:    case council_room:
    #####:  675:        return council_roomCard(state, handPos);
call    0 never executed
        -:  676:
        -:  677:    case feast:
    #####:  678:        return feastCard(state, choice1, handPos);
call    0 never executed
        -:  679:
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:
        -:  683:    case mine:
    #####:  684:      return mineCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  685:
        -:  686:    case remodel:
    #####:  687:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  688:
    #####:  689:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  695:
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:      //discard trashed card
    #####:  700:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  701:	{
    #####:  702:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  703:	    {
    #####:  704:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:
    #####:  710:      return 0;
        -:  711:
        -:  712:    case smithy:
    #####:  713:        return smithyCard(state, handPos);
call    0 never executed
        -:  714:
        -:  715:    case village:
        -:  716:      //+1 Card
    #####:  717:      drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:      //+2 Actions
    #####:  720:      state->numActions = state->numActions + 2;
        -:  721:
        -:  722:      //discard played card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:      return 0;
        -:  725:
        -:  726:    case baron:
    #####:  727:      state->numBuys++;//Increase buys by 1!
    #####:  728:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  729:	int p = 0;//Iterator for hand!
    #####:  730:	int card_not_discarded = 1;//Flag for discard set!
    #####:  731:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  732:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  733:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  734:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  735:	    state->discardCount[currentPlayer]++;
    #####:  736:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  737:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:	    }
    #####:  739:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  740:	    state->handCount[currentPlayer]--;
    #####:  741:	    card_not_discarded = 0;//Exit the loop
        -:  742:	  }
    #####:  743:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  744:	    if(DEBUG) {
        -:  745:	      printf("No estate cards in your hand, invalid choice\n");
        -:  746:	      printf("Must gain an estate if there are any\n");
        -:  747:	    }
    #####:  748:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  750:	      state->supplyCount[estate]--;//Decrement estates
    #####:  751:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:		isGameOver(state);
call    0 never executed
        -:  753:	      }
        -:  754:	    }
    #####:  755:	    card_not_discarded = 0;//Exit the loop
        -:  756:	  }
        -:  757:
        -:  758:	  else{
    #####:  759:	    p++;//Next card
        -:  760:	  }
        -:  761:	}
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  767:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  768:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	    isGameOver(state);
call    0 never executed
        -:  770:	  }
        -:  771:	}
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:    case great_hall:
        -:  778:      //+1 Card
    #####:  779:      drawCard(currentPlayer, state);
call    0 never executed
        -:  780:
        -:  781:      //+1 Actions
    #####:  782:      state->numActions++;
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  786:      return 0;
        -:  787:
        -:  788:    case minion:
        -:  789:      //+1 action
    #####:  790:      state->numActions++;
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
    #####:  795:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  state->coins = state->coins + 2;
        -:  798:	}
        -:  799:
    #####:  800:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:	{
        -:  802:	  //discard hand
    #####:  803:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:	    {
    #####:  805:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  806:	    }
        -:  807:
        -:  808:	  //draw 4
    #####:  809:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	    }
        -:  813:
        -:  814:	  //other players discard hand and redraw if hand size > 4
    #####:  815:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	    {
    #####:  817:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:		{
    #####:  819:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:		    {
        -:  821:		      //discard hand
    #####:  822:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  823:			{
    #####:  824:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  825:			}
        -:  826:
        -:  827:		      //draw 4
    #####:  828:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  829:			{
    #####:  830:			  drawCard(i, state);
call    0 never executed
        -:  831:			}
        -:  832:		    }
        -:  833:		}
        -:  834:	    }
        -:  835:
        -:  836:	}
    #####:  837:      return 0;
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  864:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:	  state->deckCount[nextPlayer]--;
        -:  867:	}
    #####:  868:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  870:	  state->discardCount[nextPlayer]--;
        -:  871:	}
        -:  872:	else{
        -:  873:	  //No Card to Reveal
        -:  874:	  if (DEBUG){
        -:  875:	    printf("No cards to reveal\n");
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	}
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }
        -:  898:
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case ambassador:
    #####:  922:      j = 0;		//used to check if player has enough cards to discard
        -:  923:
    #####:  924:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  937:	    {
    #####:  938:	      j++;
        -:  939:	    }
        -:  940:	}
    #####:  941:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      if (DEBUG)
        -:  947:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  948:
        -:  949:      //increase supply count for choosen card by amount being discarded
    #####:  950:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  951:
        -:  952:      //each other player gains a copy of revealed card
    #####:  953:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:
        -:  964:      //trash copies of cards returned to supply
    #####:  965:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  972:		  break;
        -:  973:		}
        -:  974:	    }
        -:  975:	}
        -:  976:
    #####:  977:      return 0;
        -:  978:
        -:  979:    case cutpurse:
        -:  980:
    #####:  981:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  989:		    {
    #####:  990:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  991:		      break;
        -:  992:		    }
    #####:  993:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  994:		    {
    #####:  995:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
        -:  997:			  if (DEBUG)
        -:  998:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  999:			}
    #####: 1000:		      break;
        -: 1001:		    }
        -: 1002:		}
        -: 1003:
        -: 1004:	    }
        -: 1005:
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:
        -: 1014:    case embargo:
        -: 1015:      //+2 Coins
    #####: 1016:      state->coins = state->coins + 2;
        -: 1017:
        -: 1018:      //see if selected pile is in play
    #####: 1019:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;
        -: 1022:	}
        -: 1023:
        -: 1024:      //add embargo token to selected supply pile
    #####: 1025:      state->embargoTokens[choice1]++;
        -: 1026:
        -: 1027:      //trash card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:
        -: 1031:    case outpost:
        -: 1032:      //set outpost flag
    #####: 1033:      state->outpostPlayed++;
        -: 1034:
        -: 1035:      //discard card
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:
        -: 1039:    case salvager:
        -: 1040:      //+1 buy
    #####: 1041:      state->numBuys++;
        -: 1042:
    #####: 1043:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
        -: 1045:	  //gain coins equal to trashed card
    #####: 1046:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1047:	  //trash card
    #####: 1048:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:    case sea_hag:
    #####: 1056:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1059:	  state->discardCount[i]++;
    #####: 1060:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1061:	}
        -: 1062:      }
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case treasure_map:
        -: 1066:      //search hand for another treasure_map
    #####: 1067:      index = -1;
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	    {
    #####: 1072:	      index = i;
    #####: 1073:	      break;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //trash both treasure cards
    #####: 1079:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1081:
        -: 1082:	  //gain 4 Gold cards
    #####: 1083:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1086:	    }
        -: 1087:
        -: 1088:	  //return success
    #####: 1089:	  return 1;
        -: 1090:	}
        -: 1091:
        -: 1092:      //no second treasure_map found in hand
    #####: 1093:      return -1;
        -: 1094:    }
        -: 1095:
    #####: 1096:  return -1;
        -: 1097:}
        -: 1098:
        -: 1099:
function adventurerCard called 4 returned 100% blocks executed 85%
        4: 1100:int adventurerCard(struct gameState *state)
        -: 1101:{
        4: 1102:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1103:
        -: 1104:  int temphand[MAX_HAND];// moved above the if statement
        4: 1105:  int drawntreasure=0;
        -: 1106:  int cardDrawn;
        4: 1107:  int z = 0;// this is the counter for the temp hand
        -: 1108:
       16: 1109:    while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        8: 1110:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1111:          shuffle(currentPlayer, state);
call    0 never executed
        -: 1112:        }
        8: 1113:        drawCard(currentPlayer, state);
call    0 returned 100%
        8: 1114:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1115:        //
        -: 1116:        /** Bug: replaced 'cardDrawn == copper' with '(cardDrawn = copper)' **/
        -: 1117:        //if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
        8: 1118:        if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
        8: 1119:          drawntreasure++;
        -: 1120:        else{
        -: 1121:          temphand[z]=cardDrawn;
        -: 1122:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1123:          z++;
        -: 1124:        }
        -: 1125:	}
        -: 1126:
        8: 1127:    while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1128:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1129:        z=z-1;
        -: 1130:    }
        4: 1131:    return 0;
        -: 1132:}
        -: 1133:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1134:int smithyCard(struct gameState *state, int handPos)
        -: 1135:{
        -: 1136:    int i;
    #####: 1137:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1138:      //+3 Cards
        -: 1139:      //for (i = 0; i < 3; i++)
        -: 1140:      /** Bug: replaced 'i < 3' with 'i <= 3' **/
    #####: 1141:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1144:	}
        -: 1145:      //discard card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1147:      return 0;
        -: 1148:}
        -: 1149:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1150:int mineCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1151:{
        -: 1152:      int i;
        -: 1153:      int j;
    #####: 1154:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1155:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1156:
    #####: 1157:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
        -: 1162:    //if (choice2 > treasure_map || choice2 < curse)
        -: 1163:    /** Bug: replaced '||' with '&&' **/
    #####: 1164:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1175:
        -: 1176:      //discard card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1178:
        -: 1179:      //discard trashed card
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:	      break;
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
    #####: 1189:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1190:
    #####: 1191:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:
    #####: 1201:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
    #####: 1206:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1207:
        -: 1208:      //discard card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1210:
        -: 1211:      //discard trashed card
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:	      break;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      return 0;
        -: 1221:}
        -: 1222:
        -: 1223:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1224:int council_roomCard(struct gameState *state, int handPos) {
        -: 1225:
        -: 1226:    int i;
    #####: 1227:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1228:      //+4 Cards
    #####: 1229:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //+1 Buy
    #####: 1235:      state->numBuys++;
        -: 1236:
        -: 1237:      //Each other player draws a card
        -: 1238:      //for (i = 0; i < state->numPlayers; i++)
        -: 1239:      /** Bug: replace '<' with '<=' **/
    #####: 1240:      for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      drawCard(i, state);
call    0 never executed
        -: 1245:	    }
        -: 1246:	}
        -: 1247:
        -: 1248:      //put played card in played card pile
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1250:
        -: 1251:      //+4 Cards
    #####: 1252:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:	}
        -: 1256:
        -: 1257:      //+1 Buy
    #####: 1258:      state->numBuys++;
        -: 1259:
        -: 1260:      //Each other player draws a card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      drawCard(i, state);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //put played card in played card pile
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1271:
    #####: 1272:      return 0;
        -: 1273:}
        -: 1274:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1275:int feastCard(struct gameState *state, int choice1, int handPos)
        -: 1276:{
        -: 1277:    int i;
        -: 1278:    int x;
    #####: 1279:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1280:    int temphand[MAX_HAND];// moved above the if statement
        -: 1281:
        -: 1282:      //gain card with cost up to 5
        -: 1283:      //Backup hand
    #####: 1284:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1286:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1287:      }
        -: 1288:      //Backup hand
        -: 1289:
        -: 1290:      //Update Coins for Buy
    #####: 1291:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1292:      x = 1;//Condition to loop on
    #####: 1293:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1294:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1295:          if (DEBUG)
        -: 1296:            printf("None of that card left, sorry!\n");
        -: 1297:
        -: 1298:          if (DEBUG){
        -: 1299:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1300:          }
        -: 1301:        }
    #####: 1302:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:          printf("That card is too expensive!\n");
call    0 never executed
        -: 1304:
        -: 1305:          if (DEBUG){
        -: 1306:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1307:          }
        -: 1308:        }
        -: 1309:        else{
        -: 1310:
        -: 1311:          if (DEBUG){
        -: 1312:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1313:          }
        -: 1314:
    #####: 1315:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1316:          x = 0;//No more buying cards
        -: 1317:
        -: 1318:          if (DEBUG){
        -: 1319:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1320:          }
        -: 1321:        }
        -: 1322:    }
        -: 1323:
        -: 1324:      //Reset Hand
    #####: 1325:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1327:        temphand[i] = -1;
        -: 1328:      }
        -: 1329:      //Reset Hand
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:}
        -: 1333:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:
        -: 1337:  //if card is not trashed, added to Played pile
    #####: 1338:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
        -: 1340:      //add card to played pile
    #####: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:
        -: 1345:  //set played card to -1
    #####: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:
        -: 1348:  //remove card from player's hand
    #####: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
    #####: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
    #####: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
    #####: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
    #####: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
    #####: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:
    #####: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1378:    {
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
    #####: 1387:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1388:    {
    #####: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1390:      state->deckCount[player]++;
        -: 1391:    }
    #####: 1392:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1393:    {
    #####: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
    #####: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:
        -: 1403:  //decrease number in supply pile
    #####: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:
    #####: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:
        -: 1413:  //reset coin count
        4: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
       24: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
       20: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1420:	{
       16: 1421:	  state->coins += 1;
        -: 1422:	}
        4: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
        4: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}
        -: 1431:    }
        -: 1432:
        -: 1433:  //add bonus
        4: 1434:  state->coins += bonus;
        -: 1435:
        4: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end of dominion.c
cardtest2.c:
----------------- cardtest2 Testing: smithyCard() ----------------
TEST 1: SMITHY CARD AT HANDPOS 0
G.handCount[0]: 7, expected: 7
G.hand[0][0]: 6, expected: 6
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 10, expected: 10
G.hand[0][4]: 11, expected: 11
G.hand[0][5]: 15, expected: 15
G.hand[0][6]: 14, expected: 14
G.deckCount[0]: 3, expected: 3
G.deck[0][0]: 4, expected: 4
G.deck[0][1]: 5, expected: 5
G.deck[0][2]: 12, expected: 12
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
TEST 2: SMITHY CARD AT HANDPOS 1
G.handCount[0]: 7, expected: 7
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 6, expected: 6
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 10, expected: 10
G.hand[0][4]: 11, expected: 11
G.hand[0][5]: 15, expected: 15
G.hand[0][6]: 14, expected: 14
G.deckCount[0]: 3, expected: 3
G.deck[0][0]: 4, expected: 4
G.deck[0][1]: 5, expected: 5
G.deck[0][2]: 12, expected: 12
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
TEST 3: SMITHY CARD AT HANDPOS 2
G.handCount[0]: 7, expected: 7
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 6, expected: 6
G.hand[0][3]: 10, expected: 10
G.hand[0][4]: 11, expected: 11
G.hand[0][5]: 15, expected: 15
G.hand[0][6]: 14, expected: 14
G.deckCount[0]: 3, expected: 3
G.deck[0][0]: 4, expected: 4
G.deck[0][1]: 5, expected: 5
G.deck[0][2]: 12, expected: 12
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
TEST 4: SMITHY CARD AT HANDPOS 3
G.handCount[0]: 7, expected: 7
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 6, expected: 6
G.hand[0][4]: 11, expected: 11
G.hand[0][5]: 15, expected: 15
G.hand[0][6]: 14, expected: 14
G.deckCount[0]: 3, expected: 3
G.deck[0][0]: 4, expected: 4
G.deck[0][1]: 5, expected: 5
G.deck[0][2]: 12, expected: 12
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
TEST 5: SMITHY CARD AT HANDPOS 4
G.handCount[0]: 7, expected: 7
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 10, expected: 10
G.hand[0][4]: 6, expected: 6
G.hand[0][5]: 15, expected: 15
G.hand[0][6]: 14, expected: 14
G.deckCount[0]: 3, expected: 3
G.deck[0][0]: 4, expected: 4
G.deck[0][1]: 5, expected: 5
G.deck[0][2]: 12, expected: 12
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED

UNIT TEST cardtest2 COMPLETED: 5 failures!

File 'dominion.c'
Lines executed:18.62% of 580
Branches executed:17.17% of 431
Taken at least once:13.69% of 431
Calls executed:9.26% of 108
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 150 returned 100% blocks executed 83%
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 10 returned 100% blocks executed 94%
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      350:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      250:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 40 returned 100% blocks executed 38%
       40:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       40:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       40:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       40:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       40:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       40:  576:    state->deckCount[player]--;
       40:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       40:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  // function prototypes for cards
        -:  649:  int adventurerCard(struct gameState *state);
        -:  650:  int smithyCard(struct gameState *state, int handPos);
        -:  651:  int mineCard(struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:  int council_roomCard(struct gameState *state, int handPos);
        -:  653:  int feastCard(struct gameState *state, int choice1, int handPos);
        -:  654:
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int index;
    #####:  659:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
    #####:  662:  int tributeRevealedCards[2] = {-1, -1};
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:    case council_room:
    #####:  675:        return council_roomCard(state, handPos);
call    0 never executed
        -:  676:
        -:  677:    case feast:
    #####:  678:        return feastCard(state, choice1, handPos);
call    0 never executed
        -:  679:
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:
        -:  683:    case mine:
    #####:  684:      return mineCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  685:
        -:  686:    case remodel:
    #####:  687:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  688:
    #####:  689:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  695:
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:      //discard trashed card
    #####:  700:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  701:	{
    #####:  702:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  703:	    {
    #####:  704:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:
    #####:  710:      return 0;
        -:  711:
        -:  712:    case smithy:
    #####:  713:        return smithyCard(state, handPos);
call    0 never executed
        -:  714:
        -:  715:    case village:
        -:  716:      //+1 Card
    #####:  717:      drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:      //+2 Actions
    #####:  720:      state->numActions = state->numActions + 2;
        -:  721:
        -:  722:      //discard played card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:      return 0;
        -:  725:
        -:  726:    case baron:
    #####:  727:      state->numBuys++;//Increase buys by 1!
    #####:  728:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  729:	int p = 0;//Iterator for hand!
    #####:  730:	int card_not_discarded = 1;//Flag for discard set!
    #####:  731:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  732:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  733:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  734:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  735:	    state->discardCount[currentPlayer]++;
    #####:  736:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  737:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:	    }
    #####:  739:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  740:	    state->handCount[currentPlayer]--;
    #####:  741:	    card_not_discarded = 0;//Exit the loop
        -:  742:	  }
    #####:  743:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  744:	    if(DEBUG) {
        -:  745:	      printf("No estate cards in your hand, invalid choice\n");
        -:  746:	      printf("Must gain an estate if there are any\n");
        -:  747:	    }
    #####:  748:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  750:	      state->supplyCount[estate]--;//Decrement estates
    #####:  751:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:		isGameOver(state);
call    0 never executed
        -:  753:	      }
        -:  754:	    }
    #####:  755:	    card_not_discarded = 0;//Exit the loop
        -:  756:	  }
        -:  757:
        -:  758:	  else{
    #####:  759:	    p++;//Next card
        -:  760:	  }
        -:  761:	}
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  767:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  768:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	    isGameOver(state);
call    0 never executed
        -:  770:	  }
        -:  771:	}
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:    case great_hall:
        -:  778:      //+1 Card
    #####:  779:      drawCard(currentPlayer, state);
call    0 never executed
        -:  780:
        -:  781:      //+1 Actions
    #####:  782:      state->numActions++;
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  786:      return 0;
        -:  787:
        -:  788:    case minion:
        -:  789:      //+1 action
    #####:  790:      state->numActions++;
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
    #####:  795:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  state->coins = state->coins + 2;
        -:  798:	}
        -:  799:
    #####:  800:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:	{
        -:  802:	  //discard hand
    #####:  803:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:	    {
    #####:  805:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  806:	    }
        -:  807:
        -:  808:	  //draw 4
    #####:  809:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	    }
        -:  813:
        -:  814:	  //other players discard hand and redraw if hand size > 4
    #####:  815:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	    {
    #####:  817:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:		{
    #####:  819:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:		    {
        -:  821:		      //discard hand
    #####:  822:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  823:			{
    #####:  824:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  825:			}
        -:  826:
        -:  827:		      //draw 4
    #####:  828:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  829:			{
    #####:  830:			  drawCard(i, state);
call    0 never executed
        -:  831:			}
        -:  832:		    }
        -:  833:		}
        -:  834:	    }
        -:  835:
        -:  836:	}
    #####:  837:      return 0;
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  864:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:	  state->deckCount[nextPlayer]--;
        -:  867:	}
    #####:  868:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  870:	  state->discardCount[nextPlayer]--;
        -:  871:	}
        -:  872:	else{
        -:  873:	  //No Card to Reveal
        -:  874:	  if (DEBUG){
        -:  875:	    printf("No cards to reveal\n");
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	}
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }
        -:  898:
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case ambassador:
    #####:  922:      j = 0;		//used to check if player has enough cards to discard
        -:  923:
    #####:  924:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  937:	    {
    #####:  938:	      j++;
        -:  939:	    }
        -:  940:	}
    #####:  941:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      if (DEBUG)
        -:  947:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  948:
        -:  949:      //increase supply count for choosen card by amount being discarded
    #####:  950:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  951:
        -:  952:      //each other player gains a copy of revealed card
    #####:  953:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:
        -:  964:      //trash copies of cards returned to supply
    #####:  965:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  972:		  break;
        -:  973:		}
        -:  974:	    }
        -:  975:	}
        -:  976:
    #####:  977:      return 0;
        -:  978:
        -:  979:    case cutpurse:
        -:  980:
    #####:  981:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  989:		    {
    #####:  990:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  991:		      break;
        -:  992:		    }
    #####:  993:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  994:		    {
    #####:  995:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
        -:  997:			  if (DEBUG)
        -:  998:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  999:			}
    #####: 1000:		      break;
        -: 1001:		    }
        -: 1002:		}
        -: 1003:
        -: 1004:	    }
        -: 1005:
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:
        -: 1014:    case embargo:
        -: 1015:      //+2 Coins
    #####: 1016:      state->coins = state->coins + 2;
        -: 1017:
        -: 1018:      //see if selected pile is in play
    #####: 1019:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;
        -: 1022:	}
        -: 1023:
        -: 1024:      //add embargo token to selected supply pile
    #####: 1025:      state->embargoTokens[choice1]++;
        -: 1026:
        -: 1027:      //trash card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:
        -: 1031:    case outpost:
        -: 1032:      //set outpost flag
    #####: 1033:      state->outpostPlayed++;
        -: 1034:
        -: 1035:      //discard card
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:
        -: 1039:    case salvager:
        -: 1040:      //+1 buy
    #####: 1041:      state->numBuys++;
        -: 1042:
    #####: 1043:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
        -: 1045:	  //gain coins equal to trashed card
    #####: 1046:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1047:	  //trash card
    #####: 1048:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:    case sea_hag:
    #####: 1056:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1059:	  state->discardCount[i]++;
    #####: 1060:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1061:	}
        -: 1062:      }
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case treasure_map:
        -: 1066:      //search hand for another treasure_map
    #####: 1067:      index = -1;
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	    {
    #####: 1072:	      index = i;
    #####: 1073:	      break;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //trash both treasure cards
    #####: 1079:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1081:
        -: 1082:	  //gain 4 Gold cards
    #####: 1083:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1086:	    }
        -: 1087:
        -: 1088:	  //return success
    #####: 1089:	  return 1;
        -: 1090:	}
        -: 1091:
        -: 1092:      //no second treasure_map found in hand
    #####: 1093:      return -1;
        -: 1094:    }
        -: 1095:
    #####: 1096:  return -1;
        -: 1097:}
        -: 1098:
        -: 1099:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1100:int adventurerCard(struct gameState *state)
        -: 1101:{
    #####: 1102:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1103:
        -: 1104:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1105:  int drawntreasure=0;
        -: 1106:  int cardDrawn;
    #####: 1107:  int z = 0;// this is the counter for the temp hand
        -: 1108:
    #####: 1109:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1110:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1111:          shuffle(currentPlayer, state);
call    0 never executed
        -: 1112:        }
    #####: 1113:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1114:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1115:        //
        -: 1116:        /** Bug: replaced 'cardDrawn == copper' with '(cardDrawn = copper)' **/
        -: 1117:        //if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1118:        if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1119:          drawntreasure++;
        -: 1120:        else{
        -: 1121:          temphand[z]=cardDrawn;
        -: 1122:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1123:          z++;
        -: 1124:        }
        -: 1125:	}
        -: 1126:
    #####: 1127:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1128:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1129:        z=z-1;
        -: 1130:    }
    #####: 1131:    return 0;
        -: 1132:}
        -: 1133:
function smithyCard called 5 returned 100% blocks executed 100%
        5: 1134:int smithyCard(struct gameState *state, int handPos)
        -: 1135:{
        -: 1136:    int i;
        5: 1137:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1138:      //+3 Cards
        -: 1139:      //for (i = 0; i < 3; i++)
        -: 1140:      /** Bug: replaced 'i < 3' with 'i <= 3' **/
       20: 1141:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1142:	{
       15: 1143:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1144:	}
        -: 1145:      //discard card from hand
        5: 1146:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5: 1147:      return 0;
        -: 1148:}
        -: 1149:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1150:int mineCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1151:{
        -: 1152:      int i;
        -: 1153:      int j;
    #####: 1154:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1155:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1156:
    #####: 1157:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
        -: 1162:    //if (choice2 > treasure_map || choice2 < curse)
        -: 1163:    /** Bug: replaced '||' with '&&' **/
    #####: 1164:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1175:
        -: 1176:      //discard card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1178:
        -: 1179:      //discard trashed card
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:	      break;
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
    #####: 1189:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1190:
    #####: 1191:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:
    #####: 1201:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
    #####: 1206:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1207:
        -: 1208:      //discard card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1210:
        -: 1211:      //discard trashed card
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:	      break;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      return 0;
        -: 1221:}
        -: 1222:
        -: 1223:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1224:int council_roomCard(struct gameState *state, int handPos) {
        -: 1225:
        -: 1226:    int i;
    #####: 1227:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1228:      //+4 Cards
    #####: 1229:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //+1 Buy
    #####: 1235:      state->numBuys++;
        -: 1236:
        -: 1237:      //Each other player draws a card
        -: 1238:      //for (i = 0; i < state->numPlayers; i++)
        -: 1239:      /** Bug: replace '<' with '<=' **/
    #####: 1240:      for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      drawCard(i, state);
call    0 never executed
        -: 1245:	    }
        -: 1246:	}
        -: 1247:
        -: 1248:      //put played card in played card pile
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1250:
        -: 1251:      //+4 Cards
    #####: 1252:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:	}
        -: 1256:
        -: 1257:      //+1 Buy
    #####: 1258:      state->numBuys++;
        -: 1259:
        -: 1260:      //Each other player draws a card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      drawCard(i, state);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //put played card in played card pile
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1271:
    #####: 1272:      return 0;
        -: 1273:}
        -: 1274:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1275:int feastCard(struct gameState *state, int choice1, int handPos)
        -: 1276:{
        -: 1277:    int i;
        -: 1278:    int x;
    #####: 1279:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1280:    int temphand[MAX_HAND];// moved above the if statement
        -: 1281:
        -: 1282:      //gain card with cost up to 5
        -: 1283:      //Backup hand
    #####: 1284:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1286:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1287:      }
        -: 1288:      //Backup hand
        -: 1289:
        -: 1290:      //Update Coins for Buy
    #####: 1291:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1292:      x = 1;//Condition to loop on
    #####: 1293:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1294:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1295:          if (DEBUG)
        -: 1296:            printf("None of that card left, sorry!\n");
        -: 1297:
        -: 1298:          if (DEBUG){
        -: 1299:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1300:          }
        -: 1301:        }
    #####: 1302:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:          printf("That card is too expensive!\n");
call    0 never executed
        -: 1304:
        -: 1305:          if (DEBUG){
        -: 1306:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1307:          }
        -: 1308:        }
        -: 1309:        else{
        -: 1310:
        -: 1311:          if (DEBUG){
        -: 1312:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1313:          }
        -: 1314:
    #####: 1315:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1316:          x = 0;//No more buying cards
        -: 1317:
        -: 1318:          if (DEBUG){
        -: 1319:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1320:          }
        -: 1321:        }
        -: 1322:    }
        -: 1323:
        -: 1324:      //Reset Hand
    #####: 1325:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1327:        temphand[i] = -1;
        -: 1328:      }
        -: 1329:      //Reset Hand
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:}
        -: 1333:
function discardCard called 5 returned 100% blocks executed 78%
        5: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:
        -: 1337:  //if card is not trashed, added to Played pile
        5: 1338:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1339:    {
        -: 1340:      //add card to played pile
        5: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        5: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:
        -: 1345:  //set played card to -1
        5: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:
        -: 1348:  //remove card from player's hand
        5: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
    #####: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
        5: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
        5: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
        5: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
        5: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:
        5: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1378:    {
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
    #####: 1387:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1388:    {
    #####: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1390:      state->deckCount[player]++;
        -: 1391:    }
    #####: 1392:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1393:    {
    #####: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
    #####: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:
        -: 1403:  //decrease number in supply pile
    #####: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:
    #####: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 5 returned 100% blocks executed 82%
        5: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:
        -: 1413:  //reset coin count
        5: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
       30: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
       25: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1420:	{
       20: 1421:	  state->coins += 1;
        -: 1422:	}
        5: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
        5: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}
        -: 1431:    }
        -: 1432:
        -: 1433:  //add bonus
        5: 1434:  state->coins += bonus;
        -: 1435:
        5: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end of dominion.c
cardtest3.c:
----------------- cardtest3 Testing: outpost ----------------
TEST 1: OUTPOST CARD AT HANDPOS 0
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 11, expected: 11
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 10, expected: 10
G.outpostPlayed: 1, expected: 1
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
TEST 2: OUTPOST CARD AT HANDPOS 1
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 11, expected: 11
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 10, expected: 10
G.outpostPlayed: 1, expected: 1
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
TEST 3: OUTPOST CARD AT HANDPOS 2
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 11, expected: 11
G.hand[0][3]: 10, expected: 10
G.outpostPlayed: 1, expected: 1
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
TEST 4: OUTPOST CARD AT HANDPOS 3
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 11, expected: 11
G.outpostPlayed: 1, expected: 1
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
TEST 5: OUTPOST CARD AT HANDPOS 4
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 10, expected: 10
G.outpostPlayed: 1, expected: 1
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED

UNIT TEST cardtest3 COMPLETED: 5 failures!

File 'dominion.c'
Lines executed:19.31% of 580
Branches executed:22.04% of 431
Taken at least once:13.92% of 431
Calls executed:8.33% of 108
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 150 returned 100% blocks executed 83%
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 10 returned 100% blocks executed 94%
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      350:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      250:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5 returned 100% blocks executed 100%
        5:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 25 returned 100% blocks executed 38%
       25:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       25:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       25:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       25:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  576:    state->deckCount[player]--;
       25:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       25:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 5 returned 100% blocks executed 3%
        5:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  // function prototypes for cards
        -:  649:  int adventurerCard(struct gameState *state);
        -:  650:  int smithyCard(struct gameState *state, int handPos);
        -:  651:  int mineCard(struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:  int council_roomCard(struct gameState *state, int handPos);
        -:  653:  int feastCard(struct gameState *state, int choice1, int handPos);
        -:  654:
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int index;
        5:  659:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
        5:  662:  int tributeRevealedCards[2] = {-1, -1};
        5:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
        5:  669:  switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 100%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:    case council_room:
    #####:  675:        return council_roomCard(state, handPos);
call    0 never executed
        -:  676:
        -:  677:    case feast:
    #####:  678:        return feastCard(state, choice1, handPos);
call    0 never executed
        -:  679:
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:
        -:  683:    case mine:
    #####:  684:      return mineCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  685:
        -:  686:    case remodel:
    #####:  687:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  688:
    #####:  689:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  695:
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:      //discard trashed card
    #####:  700:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  701:	{
    #####:  702:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  703:	    {
    #####:  704:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:
    #####:  710:      return 0;
        -:  711:
        -:  712:    case smithy:
    #####:  713:        return smithyCard(state, handPos);
call    0 never executed
        -:  714:
        -:  715:    case village:
        -:  716:      //+1 Card
    #####:  717:      drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:      //+2 Actions
    #####:  720:      state->numActions = state->numActions + 2;
        -:  721:
        -:  722:      //discard played card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:      return 0;
        -:  725:
        -:  726:    case baron:
    #####:  727:      state->numBuys++;//Increase buys by 1!
    #####:  728:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  729:	int p = 0;//Iterator for hand!
    #####:  730:	int card_not_discarded = 1;//Flag for discard set!
    #####:  731:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  732:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  733:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  734:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  735:	    state->discardCount[currentPlayer]++;
    #####:  736:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  737:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:	    }
    #####:  739:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  740:	    state->handCount[currentPlayer]--;
    #####:  741:	    card_not_discarded = 0;//Exit the loop
        -:  742:	  }
    #####:  743:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  744:	    if(DEBUG) {
        -:  745:	      printf("No estate cards in your hand, invalid choice\n");
        -:  746:	      printf("Must gain an estate if there are any\n");
        -:  747:	    }
    #####:  748:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  750:	      state->supplyCount[estate]--;//Decrement estates
    #####:  751:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:		isGameOver(state);
call    0 never executed
        -:  753:	      }
        -:  754:	    }
    #####:  755:	    card_not_discarded = 0;//Exit the loop
        -:  756:	  }
        -:  757:
        -:  758:	  else{
    #####:  759:	    p++;//Next card
        -:  760:	  }
        -:  761:	}
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  767:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  768:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	    isGameOver(state);
call    0 never executed
        -:  770:	  }
        -:  771:	}
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:    case great_hall:
        -:  778:      //+1 Card
    #####:  779:      drawCard(currentPlayer, state);
call    0 never executed
        -:  780:
        -:  781:      //+1 Actions
    #####:  782:      state->numActions++;
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  786:      return 0;
        -:  787:
        -:  788:    case minion:
        -:  789:      //+1 action
    #####:  790:      state->numActions++;
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
    #####:  795:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  state->coins = state->coins + 2;
        -:  798:	}
        -:  799:
    #####:  800:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:	{
        -:  802:	  //discard hand
    #####:  803:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:	    {
    #####:  805:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  806:	    }
        -:  807:
        -:  808:	  //draw 4
    #####:  809:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	    }
        -:  813:
        -:  814:	  //other players discard hand and redraw if hand size > 4
    #####:  815:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	    {
    #####:  817:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:		{
    #####:  819:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:		    {
        -:  821:		      //discard hand
    #####:  822:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  823:			{
    #####:  824:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  825:			}
        -:  826:
        -:  827:		      //draw 4
    #####:  828:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  829:			{
    #####:  830:			  drawCard(i, state);
call    0 never executed
        -:  831:			}
        -:  832:		    }
        -:  833:		}
        -:  834:	    }
        -:  835:
        -:  836:	}
    #####:  837:      return 0;
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  864:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:	  state->deckCount[nextPlayer]--;
        -:  867:	}
    #####:  868:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  870:	  state->discardCount[nextPlayer]--;
        -:  871:	}
        -:  872:	else{
        -:  873:	  //No Card to Reveal
        -:  874:	  if (DEBUG){
        -:  875:	    printf("No cards to reveal\n");
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	}
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }
        -:  898:
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case ambassador:
    #####:  922:      j = 0;		//used to check if player has enough cards to discard
        -:  923:
    #####:  924:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  937:	    {
    #####:  938:	      j++;
        -:  939:	    }
        -:  940:	}
    #####:  941:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      if (DEBUG)
        -:  947:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  948:
        -:  949:      //increase supply count for choosen card by amount being discarded
    #####:  950:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  951:
        -:  952:      //each other player gains a copy of revealed card
    #####:  953:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:
        -:  964:      //trash copies of cards returned to supply
    #####:  965:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  972:		  break;
        -:  973:		}
        -:  974:	    }
        -:  975:	}
        -:  976:
    #####:  977:      return 0;
        -:  978:
        -:  979:    case cutpurse:
        -:  980:
    #####:  981:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  989:		    {
    #####:  990:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  991:		      break;
        -:  992:		    }
    #####:  993:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  994:		    {
    #####:  995:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
        -:  997:			  if (DEBUG)
        -:  998:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  999:			}
    #####: 1000:		      break;
        -: 1001:		    }
        -: 1002:		}
        -: 1003:
        -: 1004:	    }
        -: 1005:
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:
        -: 1014:    case embargo:
        -: 1015:      //+2 Coins
    #####: 1016:      state->coins = state->coins + 2;
        -: 1017:
        -: 1018:      //see if selected pile is in play
    #####: 1019:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;
        -: 1022:	}
        -: 1023:
        -: 1024:      //add embargo token to selected supply pile
    #####: 1025:      state->embargoTokens[choice1]++;
        -: 1026:
        -: 1027:      //trash card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:
        -: 1031:    case outpost:
        -: 1032:      //set outpost flag
        5: 1033:      state->outpostPlayed++;
        -: 1034:
        -: 1035:      //discard card
        5: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5: 1037:      return 0;
        -: 1038:
        -: 1039:    case salvager:
        -: 1040:      //+1 buy
    #####: 1041:      state->numBuys++;
        -: 1042:
    #####: 1043:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
        -: 1045:	  //gain coins equal to trashed card
    #####: 1046:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1047:	  //trash card
    #####: 1048:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:    case sea_hag:
    #####: 1056:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1059:	  state->discardCount[i]++;
    #####: 1060:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1061:	}
        -: 1062:      }
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case treasure_map:
        -: 1066:      //search hand for another treasure_map
    #####: 1067:      index = -1;
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	    {
    #####: 1072:	      index = i;
    #####: 1073:	      break;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //trash both treasure cards
    #####: 1079:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1081:
        -: 1082:	  //gain 4 Gold cards
    #####: 1083:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1086:	    }
        -: 1087:
        -: 1088:	  //return success
    #####: 1089:	  return 1;
        -: 1090:	}
        -: 1091:
        -: 1092:      //no second treasure_map found in hand
    #####: 1093:      return -1;
        -: 1094:    }
        -: 1095:
    #####: 1096:  return -1;
        -: 1097:}
        -: 1098:
        -: 1099:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1100:int adventurerCard(struct gameState *state)
        -: 1101:{
    #####: 1102:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1103:
        -: 1104:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1105:  int drawntreasure=0;
        -: 1106:  int cardDrawn;
    #####: 1107:  int z = 0;// this is the counter for the temp hand
        -: 1108:
    #####: 1109:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1110:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1111:          shuffle(currentPlayer, state);
call    0 never executed
        -: 1112:        }
    #####: 1113:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1114:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1115:        //
        -: 1116:        /** Bug: replaced 'cardDrawn == copper' with '(cardDrawn = copper)' **/
        -: 1117:        //if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1118:        if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1119:          drawntreasure++;
        -: 1120:        else{
        -: 1121:          temphand[z]=cardDrawn;
        -: 1122:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1123:          z++;
        -: 1124:        }
        -: 1125:	}
        -: 1126:
    #####: 1127:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1128:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1129:        z=z-1;
        -: 1130:    }
    #####: 1131:    return 0;
        -: 1132:}
        -: 1133:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1134:int smithyCard(struct gameState *state, int handPos)
        -: 1135:{
        -: 1136:    int i;
    #####: 1137:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1138:      //+3 Cards
        -: 1139:      //for (i = 0; i < 3; i++)
        -: 1140:      /** Bug: replaced 'i < 3' with 'i <= 3' **/
    #####: 1141:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1144:	}
        -: 1145:      //discard card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1147:      return 0;
        -: 1148:}
        -: 1149:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1150:int mineCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1151:{
        -: 1152:      int i;
        -: 1153:      int j;
    #####: 1154:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1155:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1156:
    #####: 1157:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
        -: 1162:    //if (choice2 > treasure_map || choice2 < curse)
        -: 1163:    /** Bug: replaced '||' with '&&' **/
    #####: 1164:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1175:
        -: 1176:      //discard card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1178:
        -: 1179:      //discard trashed card
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:	      break;
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
    #####: 1189:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1190:
    #####: 1191:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:
    #####: 1201:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
    #####: 1206:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1207:
        -: 1208:      //discard card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1210:
        -: 1211:      //discard trashed card
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:	      break;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      return 0;
        -: 1221:}
        -: 1222:
        -: 1223:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1224:int council_roomCard(struct gameState *state, int handPos) {
        -: 1225:
        -: 1226:    int i;
    #####: 1227:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1228:      //+4 Cards
    #####: 1229:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //+1 Buy
    #####: 1235:      state->numBuys++;
        -: 1236:
        -: 1237:      //Each other player draws a card
        -: 1238:      //for (i = 0; i < state->numPlayers; i++)
        -: 1239:      /** Bug: replace '<' with '<=' **/
    #####: 1240:      for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      drawCard(i, state);
call    0 never executed
        -: 1245:	    }
        -: 1246:	}
        -: 1247:
        -: 1248:      //put played card in played card pile
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1250:
        -: 1251:      //+4 Cards
    #####: 1252:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:	}
        -: 1256:
        -: 1257:      //+1 Buy
    #####: 1258:      state->numBuys++;
        -: 1259:
        -: 1260:      //Each other player draws a card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      drawCard(i, state);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //put played card in played card pile
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1271:
    #####: 1272:      return 0;
        -: 1273:}
        -: 1274:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1275:int feastCard(struct gameState *state, int choice1, int handPos)
        -: 1276:{
        -: 1277:    int i;
        -: 1278:    int x;
    #####: 1279:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1280:    int temphand[MAX_HAND];// moved above the if statement
        -: 1281:
        -: 1282:      //gain card with cost up to 5
        -: 1283:      //Backup hand
    #####: 1284:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1286:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1287:      }
        -: 1288:      //Backup hand
        -: 1289:
        -: 1290:      //Update Coins for Buy
    #####: 1291:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1292:      x = 1;//Condition to loop on
    #####: 1293:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1294:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1295:          if (DEBUG)
        -: 1296:            printf("None of that card left, sorry!\n");
        -: 1297:
        -: 1298:          if (DEBUG){
        -: 1299:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1300:          }
        -: 1301:        }
    #####: 1302:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:          printf("That card is too expensive!\n");
call    0 never executed
        -: 1304:
        -: 1305:          if (DEBUG){
        -: 1306:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1307:          }
        -: 1308:        }
        -: 1309:        else{
        -: 1310:
        -: 1311:          if (DEBUG){
        -: 1312:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1313:          }
        -: 1314:
    #####: 1315:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1316:          x = 0;//No more buying cards
        -: 1317:
        -: 1318:          if (DEBUG){
        -: 1319:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1320:          }
        -: 1321:        }
        -: 1322:    }
        -: 1323:
        -: 1324:      //Reset Hand
    #####: 1325:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1327:        temphand[i] = -1;
        -: 1328:      }
        -: 1329:      //Reset Hand
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:}
        -: 1333:
function discardCard called 5 returned 100% blocks executed 89%
        5: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:
        -: 1337:  //if card is not trashed, added to Played pile
        5: 1338:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1339:    {
        -: 1340:      //add card to played pile
        5: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        5: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:
        -: 1345:  //set played card to -1
        5: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:
        -: 1348:  //remove card from player's hand
        5: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
        1: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
        4: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
        4: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
        4: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
        4: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:
        5: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1378:    {
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
    #####: 1387:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1388:    {
    #####: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1390:      state->deckCount[player]++;
        -: 1391:    }
    #####: 1392:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1393:    {
    #####: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
    #####: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:
        -: 1403:  //decrease number in supply pile
    #####: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:
    #####: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 5 returned 100% blocks executed 82%
        5: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:
        -: 1413:  //reset coin count
        5: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
       30: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
       25: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1420:	{
       20: 1421:	  state->coins += 1;
        -: 1422:	}
        5: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
        5: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}
        -: 1431:    }
        -: 1432:
        -: 1433:  //add bonus
        5: 1434:  state->coins += bonus;
        -: 1435:
        5: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end of dominion.c
cardtest4.c:
----------------- cardtest4 Testing: salvager ----------------
TEST 1: SALVAGER CARD AT HANDPOS 0, TRASHING HANDPOS 0
G.numBuys: 2, expected: 2
G.coins: 0, expected: 4	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 4
G.hand[0][0]: 11, expected: 11
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: 10, expected: 10
G.discardCount[0]: 0, expected: 0
TEST 1: SALVAGER CARD AT HANDPOS 0, TRASHING HANDPOS 1
G.numBuys: 2, expected: 2
G.coins: 5, expected: 5
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][1]: 11, expected: 11
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 1: SALVAGER CARD AT HANDPOS 0, TRASHING HANDPOS 2
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 11, expected: 11
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 1: SALVAGER CARD AT HANDPOS 0, TRASHING HANDPOS 3
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 11, expected: 11
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 1: SALVAGER CARD AT HANDPOS 0, TRASHING HANDPOS 4
G.numBuys: 2, expected: 2
G.coins: 5, expected: 5
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 10, expected: 10
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 2: SALVAGER CARD AT HANDPOS 1, TRASHING HANDPOS 0
G.numBuys: 2, expected: 2
G.coins: 0, expected: 6	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 3	<------------------- TEST FAILED
G.hand[0][0]: 7, expected: 11	<------------------- TEST FAILED
G.hand[0][1]: 11, expected: 10	<------------------- TEST FAILED
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 2: SALVAGER CARD AT HANDPOS 1, TRASHING HANDPOS 1
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 4	<------------------- TEST FAILED
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 10, expected: 11	<------------------- TEST FAILED
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[0]: 0, expected: 0
TEST 2: SALVAGER CARD AT HANDPOS 1, TRASHING HANDPOS 2
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 10, expected: 10
G.hand[0][2]: 11, expected: 11
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 2: SALVAGER CARD AT HANDPOS 1, TRASHING HANDPOS 3
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 11, expected: 11
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 2: SALVAGER CARD AT HANDPOS 1, TRASHING HANDPOS 4
G.numBuys: 2, expected: 2
G.coins: 5, expected: 5
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 10, expected: 10
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 3: SALVAGER CARD AT HANDPOS 2, TRASHING HANDPOS 0
G.numBuys: 2, expected: 2
G.coins: 0, expected: 6	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 3	<------------------- TEST FAILED
G.hand[0][0]: 7, expected: 11	<------------------- TEST FAILED
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 11, expected: 10	<------------------- TEST FAILED
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 3: SALVAGER CARD AT HANDPOS 2, TRASHING HANDPOS 1
G.numBuys: 2, expected: 2
G.coins: 5, expected: 5
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 11, expected: 11
G.hand[0][2]: 10, expected: 10
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 3: SALVAGER CARD AT HANDPOS 2, TRASHING HANDPOS 2
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 4	<------------------- TEST FAILED
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 10, expected: 11	<------------------- TEST FAILED
G.hand[0][3]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[0]: 0, expected: 0
TEST 3: SALVAGER CARD AT HANDPOS 2, TRASHING HANDPOS 3
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 11, expected: 11
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 3: SALVAGER CARD AT HANDPOS 2, TRASHING HANDPOS 4
G.numBuys: 2, expected: 2
G.coins: 5, expected: 5
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 10, expected: 10
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 4: SALVAGER CARD AT HANDPOS 3, TRASHING HANDPOS 0
G.numBuys: 2, expected: 2
G.coins: 0, expected: 6	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 3	<------------------- TEST FAILED
G.hand[0][0]: 7, expected: 11	<------------------- TEST FAILED
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 4: SALVAGER CARD AT HANDPOS 3, TRASHING HANDPOS 1
G.numBuys: 2, expected: 2
G.coins: 5, expected: 5
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 11, expected: 11
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 4: SALVAGER CARD AT HANDPOS 3, TRASHING HANDPOS 2
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 11, expected: 11
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 4: SALVAGER CARD AT HANDPOS 3, TRASHING HANDPOS 3
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 4	<------------------- TEST FAILED
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: -1, expected: 11	<------------------- TEST FAILED
G.discardCount[0]: 0, expected: 0
TEST 4: SALVAGER CARD AT HANDPOS 3, TRASHING HANDPOS 4
G.numBuys: 2, expected: 2
G.coins: 5, expected: 5
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 5: SALVAGER CARD AT HANDPOS 4, TRASHING HANDPOS 0
G.numBuys: 2, expected: 2
G.coins: 0, expected: 6	<------------------- TEST FAILED
G.handCount[0]: 4, expected: 3	<------------------- TEST FAILED
G.hand[0][0]: 7, expected: 24	<------------------- TEST FAILED
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 5: SALVAGER CARD AT HANDPOS 4, TRASHING HANDPOS 1
G.numBuys: 2, expected: 2
G.coins: 5, expected: 5
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 24, expected: 24
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 5: SALVAGER CARD AT HANDPOS 4, TRASHING HANDPOS 2
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 24, expected: 24
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 5: SALVAGER CARD AT HANDPOS 4, TRASHING HANDPOS 3
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 3
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.discardCount[0]: 0, expected: 1	<------------------- TEST FAILED
G.discard[0][0]: 387389207, expected: 24	<------------------- TEST FAILED
TEST 5: SALVAGER CARD AT HANDPOS 4, TRASHING HANDPOS 4
G.numBuys: 2, expected: 2
G.coins: 4, expected: 4
G.handCount[0]: 3, expected: 4	<------------------- TEST FAILED
G.hand[0][0]: 7, expected: 7
G.hand[0][1]: 8, expected: 8
G.hand[0][2]: 9, expected: 9
G.hand[0][3]: -1, expected: 10	<------------------- TEST FAILED
G.discardCount[0]: 0, expected: 0

UNIT TEST cardtest4 COMPLETED: 65 failures!

File 'dominion.c'
Lines executed:21.72% of 580
Branches executed:29.00% of 431
Taken at least once:16.01% of 431
Calls executed:12.04% of 108
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 750 returned 100% blocks executed 83%
      750:    8:int compare(const void* a, const void* b) {
      750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      200:   12:    return -1;
      550:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 25 returned 100% blocks executed 88%
       25:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       25:   44:  SelectStream(1);
call    0 returned 100%
       25:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       25:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       25:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      275:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2750:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       25:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       25:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       25:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       25:   89:      state->supplyCount[estate] = 8;
       25:   90:      state->supplyCount[duchy] = 8;
       25:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       25:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       25:  102:  state->supplyCount[silver] = 40;
       25:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      525:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     4125:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3875:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      250:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      100:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       50:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      200:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      250:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3625:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       75:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       50:  140:      state->deckCount[i] = 0;
      200:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      150:  143:	  state->deck[i][j] = estate;
      150:  144:	  state->deckCount[i]++;
        -:  145:	}
      400:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      350:  148:	  state->deck[i][j] = copper;
      350:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       75:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       50:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       75:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       50:  166:      state->handCount[i] = 0;
       50:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      700:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      675:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       25:  182:  state->outpostPlayed = 0;
       25:  183:  state->phase = 0;
       25:  184:  state->numActions = 1;
       25:  185:  state->numBuys = 1;
       25:  186:  state->playedCardCount = 0;
       25:  187:  state->whoseTurn = 0;
       25:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      150:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      125:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       25:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       25:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 50 returned 100% blocks executed 94%
       50:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       50:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       50:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       50:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      600:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      500:  216:    newDeck[newDeckPos] = state->deck[player][card];
      500:  217:    newDeckPos++;
     1750:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     1250:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      500:  221:    state->deckCount[player]--;
        -:  222:  }
      550:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      500:  224:    state->deck[player][i] = newDeck[i];
      500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       50:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 20 returned 100% blocks executed 100%
       20:  315:int handCard(int handPos, struct gameState *state) {
       20:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 45 returned 100% blocks executed 100%
       45:  346:int whoseTurn(struct gameState *state) {
       45:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 125 returned 100% blocks executed 38%
      125:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      125:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      125:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      125:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      125:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      125:  576:    state->deckCount[player]--;
      125:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      125:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 45 returned 100% blocks executed 27%
       45:  583:int getCost(int cardNumber)
        -:  584:{
       45:  585:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 9%
branch  8 taken 18%
branch  9 taken 18%
branch 10 taken 18%
branch 11 taken 18%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 20%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
        8:  604:      return 5;
        -:  605:    case feast:
        8:  606:      return 4;
        -:  607:    case gardens:
        8:  608:      return 4;
        -:  609:    case mine:
        8:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
        9:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 25 returned 100% blocks executed 5%
       25:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  // function prototypes for cards
        -:  649:  int adventurerCard(struct gameState *state);
        -:  650:  int smithyCard(struct gameState *state, int handPos);
        -:  651:  int mineCard(struct gameState *state, int choice1, int choice2, int handPos);
        -:  652:  int council_roomCard(struct gameState *state, int handPos);
        -:  653:  int feastCard(struct gameState *state, int choice1, int handPos);
        -:  654:
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int index;
       25:  659:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       25:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
       25:  662:  int tributeRevealedCards[2] = {-1, -1};
       25:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
       25:  669:  switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 100%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:    case council_room:
    #####:  675:        return council_roomCard(state, handPos);
call    0 never executed
        -:  676:
        -:  677:    case feast:
    #####:  678:        return feastCard(state, choice1, handPos);
call    0 never executed
        -:  679:
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:
        -:  683:    case mine:
    #####:  684:      return mineCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  685:
        -:  686:    case remodel:
    #####:  687:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  688:
    #####:  689:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  695:
        -:  696:      //discard card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:      //discard trashed card
    #####:  700:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  701:	{
    #####:  702:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  703:	    {
    #####:  704:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:
        -:  709:
    #####:  710:      return 0;
        -:  711:
        -:  712:    case smithy:
    #####:  713:        return smithyCard(state, handPos);
call    0 never executed
        -:  714:
        -:  715:    case village:
        -:  716:      //+1 Card
    #####:  717:      drawCard(currentPlayer, state);
call    0 never executed
        -:  718:
        -:  719:      //+2 Actions
    #####:  720:      state->numActions = state->numActions + 2;
        -:  721:
        -:  722:      //discard played card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:      return 0;
        -:  725:
        -:  726:    case baron:
    #####:  727:      state->numBuys++;//Increase buys by 1!
    #####:  728:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  729:	int p = 0;//Iterator for hand!
    #####:  730:	int card_not_discarded = 1;//Flag for discard set!
    #####:  731:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  732:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  733:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  734:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  735:	    state->discardCount[currentPlayer]++;
    #####:  736:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  737:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:	    }
    #####:  739:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  740:	    state->handCount[currentPlayer]--;
    #####:  741:	    card_not_discarded = 0;//Exit the loop
        -:  742:	  }
    #####:  743:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  744:	    if(DEBUG) {
        -:  745:	      printf("No estate cards in your hand, invalid choice\n");
        -:  746:	      printf("Must gain an estate if there are any\n");
        -:  747:	    }
    #####:  748:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  750:	      state->supplyCount[estate]--;//Decrement estates
    #####:  751:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  752:		isGameOver(state);
call    0 never executed
        -:  753:	      }
        -:  754:	    }
    #####:  755:	    card_not_discarded = 0;//Exit the loop
        -:  756:	  }
        -:  757:
        -:  758:	  else{
    #####:  759:	    p++;//Next card
        -:  760:	  }
        -:  761:	}
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  767:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  768:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	    isGameOver(state);
call    0 never executed
        -:  770:	  }
        -:  771:	}
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:    case great_hall:
        -:  778:      //+1 Card
    #####:  779:      drawCard(currentPlayer, state);
call    0 never executed
        -:  780:
        -:  781:      //+1 Actions
    #####:  782:      state->numActions++;
        -:  783:
        -:  784:      //discard card from hand
    #####:  785:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  786:      return 0;
        -:  787:
        -:  788:    case minion:
        -:  789:      //+1 action
    #####:  790:      state->numActions++;
        -:  791:
        -:  792:      //discard card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  794:
    #####:  795:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  state->coins = state->coins + 2;
        -:  798:	}
        -:  799:
    #####:  800:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:	{
        -:  802:	  //discard hand
    #####:  803:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:	    {
    #####:  805:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  806:	    }
        -:  807:
        -:  808:	  //draw 4
    #####:  809:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	    }
        -:  813:
        -:  814:	  //other players discard hand and redraw if hand size > 4
    #####:  815:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	    {
    #####:  817:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:		{
    #####:  819:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:		    {
        -:  821:		      //discard hand
    #####:  822:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  823:			{
    #####:  824:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  825:			}
        -:  826:
        -:  827:		      //draw 4
    #####:  828:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  829:			{
    #####:  830:			  drawCard(i, state);
call    0 never executed
        -:  831:			}
        -:  832:		    }
        -:  833:		}
        -:  834:	    }
        -:  835:
        -:  836:	}
    #####:  837:      return 0;
        -:  838:
        -:  839:    case steward:
    #####:  840:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //+2 cards
    #####:  843:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  844:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  845:	}
    #####:  846:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //+2 coins
    #####:  849:	  state->coins = state->coins + 2;
        -:  850:	}
        -:  851:      else
        -:  852:	{
        -:  853:	  //trash 2 cards in hand
    #####:  854:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  855:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  856:	}
        -:  857:
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  860:      return 0;
        -:  861:
        -:  862:    case tribute:
    #####:  863:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  864:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  866:	  state->deckCount[nextPlayer]--;
        -:  867:	}
    #####:  868:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  870:	  state->discardCount[nextPlayer]--;
        -:  871:	}
        -:  872:	else{
        -:  873:	  //No Card to Reveal
        -:  874:	  if (DEBUG){
        -:  875:	    printf("No cards to reveal\n");
        -:  876:	  }
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	}
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }
        -:  898:
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case ambassador:
    #####:  922:      j = 0;		//used to check if player has enough cards to discard
        -:  923:
    #####:  924:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  937:	    {
    #####:  938:	      j++;
        -:  939:	    }
        -:  940:	}
    #####:  941:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
        -:  946:      if (DEBUG)
        -:  947:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  948:
        -:  949:      //increase supply count for choosen card by amount being discarded
    #####:  950:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  951:
        -:  952:      //each other player gains a copy of revealed card
    #####:  953:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:	    {
    #####:  957:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:      //discard played card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:
        -:  964:      //trash copies of cards returned to supply
    #####:  965:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  970:		{
    #####:  971:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  972:		  break;
        -:  973:		}
        -:  974:	    }
        -:  975:	}
        -:  976:
    #####:  977:      return 0;
        -:  978:
        -:  979:    case cutpurse:
        -:  980:
    #####:  981:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  989:		    {
    #####:  990:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  991:		      break;
        -:  992:		    }
    #####:  993:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  994:		    {
    #####:  995:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
        -:  997:			  if (DEBUG)
        -:  998:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  999:			}
    #####: 1000:		      break;
        -: 1001:		    }
        -: 1002:		}
        -: 1003:
        -: 1004:	    }
        -: 1005:
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:
        -: 1014:    case embargo:
        -: 1015:      //+2 Coins
    #####: 1016:      state->coins = state->coins + 2;
        -: 1017:
        -: 1018:      //see if selected pile is in play
    #####: 1019:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;
        -: 1022:	}
        -: 1023:
        -: 1024:      //add embargo token to selected supply pile
    #####: 1025:      state->embargoTokens[choice1]++;
        -: 1026:
        -: 1027:      //trash card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:
        -: 1031:    case outpost:
        -: 1032:      //set outpost flag
    #####: 1033:      state->outpostPlayed++;
        -: 1034:
        -: 1035:      //discard card
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1037:      return 0;
        -: 1038:
        -: 1039:    case salvager:
        -: 1040:      //+1 buy
       25: 1041:      state->numBuys++;
        -: 1042:
       25: 1043:      if (choice1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1044:	{
        -: 1045:	  //gain coins equal to trashed card
       20: 1046:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1047:	  //trash card
       20: 1048:	  discardCard(choice1, currentPlayer, state, 1);
call    0 returned 100%
        -: 1049:	}
        -: 1050:
        -: 1051:      //discard card
       25: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       25: 1053:      return 0;
        -: 1054:
        -: 1055:    case sea_hag:
    #####: 1056:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1059:	  state->discardCount[i]++;
    #####: 1060:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1061:	}
        -: 1062:      }
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case treasure_map:
        -: 1066:      //search hand for another treasure_map
    #####: 1067:      index = -1;
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1071:	    {
    #####: 1072:	      index = i;
    #####: 1073:	      break;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //trash both treasure cards
    #####: 1079:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1081:
        -: 1082:	  //gain 4 Gold cards
    #####: 1083:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1086:	    }
        -: 1087:
        -: 1088:	  //return success
    #####: 1089:	  return 1;
        -: 1090:	}
        -: 1091:
        -: 1092:      //no second treasure_map found in hand
    #####: 1093:      return -1;
        -: 1094:    }
        -: 1095:
    #####: 1096:  return -1;
        -: 1097:}
        -: 1098:
        -: 1099:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1100:int adventurerCard(struct gameState *state)
        -: 1101:{
    #####: 1102:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1103:
        -: 1104:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1105:  int drawntreasure=0;
        -: 1106:  int cardDrawn;
    #####: 1107:  int z = 0;// this is the counter for the temp hand
        -: 1108:
    #####: 1109:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1110:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1111:          shuffle(currentPlayer, state);
call    0 never executed
        -: 1112:        }
    #####: 1113:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1114:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1115:        //
        -: 1116:        /** Bug: replaced 'cardDrawn == copper' with '(cardDrawn = copper)' **/
        -: 1117:        //if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1118:        if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1119:          drawntreasure++;
        -: 1120:        else{
        -: 1121:          temphand[z]=cardDrawn;
        -: 1122:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1123:          z++;
        -: 1124:        }
        -: 1125:	}
        -: 1126:
    #####: 1127:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1128:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1129:        z=z-1;
        -: 1130:    }
    #####: 1131:    return 0;
        -: 1132:}
        -: 1133:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1134:int smithyCard(struct gameState *state, int handPos)
        -: 1135:{
        -: 1136:    int i;
    #####: 1137:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1138:      //+3 Cards
        -: 1139:      //for (i = 0; i < 3; i++)
        -: 1140:      /** Bug: replaced 'i < 3' with 'i <= 3' **/
    #####: 1141:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1144:	}
        -: 1145:      //discard card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1147:      return 0;
        -: 1148:}
        -: 1149:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1150:int mineCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1151:{
        -: 1152:      int i;
        -: 1153:      int j;
    #####: 1154:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1155:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1156:
    #####: 1157:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
        -: 1162:    //if (choice2 > treasure_map || choice2 < curse)
        -: 1163:    /** Bug: replaced '||' with '&&' **/
    #####: 1164:      if (choice2 > treasure_map && choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1175:
        -: 1176:      //discard card from hand
    #####: 1177:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1178:
        -: 1179:      //discard trashed card
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:	      break;
        -: 1186:	    }
        -: 1187:	}
        -: 1188:
    #####: 1189:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1190:
    #####: 1191:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:
    #####: 1201:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
    #####: 1206:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1207:
        -: 1208:      //discard card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1210:
        -: 1211:      //discard trashed card
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
    #####: 1214:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1217:	      break;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      return 0;
        -: 1221:}
        -: 1222:
        -: 1223:
function council_roomCard called 0 returned 0% blocks executed 0%
    #####: 1224:int council_roomCard(struct gameState *state, int handPos) {
        -: 1225:
        -: 1226:    int i;
    #####: 1227:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1228:      //+4 Cards
    #####: 1229:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1232:	}
        -: 1233:
        -: 1234:      //+1 Buy
    #####: 1235:      state->numBuys++;
        -: 1236:
        -: 1237:      //Each other player draws a card
        -: 1238:      //for (i = 0; i < state->numPlayers; i++)
        -: 1239:      /** Bug: replace '<' with '<=' **/
    #####: 1240:      for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      drawCard(i, state);
call    0 never executed
        -: 1245:	    }
        -: 1246:	}
        -: 1247:
        -: 1248:      //put played card in played card pile
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1250:
        -: 1251:      //+4 Cards
    #####: 1252:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:	}
        -: 1256:
        -: 1257:      //+1 Buy
    #####: 1258:      state->numBuys++;
        -: 1259:
        -: 1260:      //Each other player draws a card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      drawCard(i, state);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //put played card in played card pile
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1271:
    #####: 1272:      return 0;
        -: 1273:}
        -: 1274:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1275:int feastCard(struct gameState *state, int choice1, int handPos)
        -: 1276:{
        -: 1277:    int i;
        -: 1278:    int x;
    #####: 1279:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1280:    int temphand[MAX_HAND];// moved above the if statement
        -: 1281:
        -: 1282:      //gain card with cost up to 5
        -: 1283:      //Backup hand
    #####: 1284:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1286:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1287:      }
        -: 1288:      //Backup hand
        -: 1289:
        -: 1290:      //Update Coins for Buy
    #####: 1291:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1292:      x = 1;//Condition to loop on
    #####: 1293:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1294:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1295:          if (DEBUG)
        -: 1296:            printf("None of that card left, sorry!\n");
        -: 1297:
        -: 1298:          if (DEBUG){
        -: 1299:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1300:          }
        -: 1301:        }
    #####: 1302:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:          printf("That card is too expensive!\n");
call    0 never executed
        -: 1304:
        -: 1305:          if (DEBUG){
        -: 1306:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1307:          }
        -: 1308:        }
        -: 1309:        else{
        -: 1310:
        -: 1311:          if (DEBUG){
        -: 1312:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1313:          }
        -: 1314:
    #####: 1315:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1316:          x = 0;//No more buying cards
        -: 1317:
        -: 1318:          if (DEBUG){
        -: 1319:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1320:          }
        -: 1321:        }
        -: 1322:    }
        -: 1323:
        -: 1324:      //Reset Hand
    #####: 1325:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1326:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1327:        temphand[i] = -1;
        -: 1328:      }
        -: 1329:      //Reset Hand
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:}
        -: 1333:
function discardCard called 45 returned 100% blocks executed 89%
       45: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:
        -: 1337:  //if card is not trashed, added to Played pile
       45: 1338:  if (trashFlag < 1)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -: 1339:    {
        -: 1340:      //add card to played pile
       25: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       25: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:
        -: 1345:  //set played card to -1
       45: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:
        -: 1348:  //remove card from player's hand
       45: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
       10: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
       35: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
       35: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
       35: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
       35: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:
       45: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1378:    {
    #####: 1379:      return -1;
        -: 1380:    }
        -: 1381:
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
    #####: 1387:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1388:    {
    #####: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1390:      state->deckCount[player]++;
        -: 1391:    }
    #####: 1392:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1393:    {
    #####: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
    #####: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:
        -: 1403:  //decrease number in supply pile
    #####: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:
    #####: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 25 returned 100% blocks executed 82%
       25: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:
        -: 1413:  //reset coin count
       25: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
      150: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
      125: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1420:	{
      100: 1421:	  state->coins += 1;
        -: 1422:	}
       25: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
       25: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}
        -: 1431:    }
        -: 1432:
        -: 1433:  //add bonus
       25: 1434:  state->coins += bonus;
        -: 1435:
       25: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end of dominion.c
